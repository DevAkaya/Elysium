/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => EasyTypingPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// core.ts
var import_obsidian = __toModule(require("obsidian"));
var InlineType;
(function(InlineType3) {
  InlineType3["text"] = "text";
  InlineType3["code"] = "code";
  InlineType3["formula"] = "formula";
  InlineType3["link"] = "link";
  InlineType3["user"] = "user-defined";
  InlineType3["none"] = "none";
})(InlineType || (InlineType = {}));
var LineType;
(function(LineType2) {
  LineType2["text"] = "text";
  LineType2["code"] = "code";
  LineType2["formula"] = "formula";
  LineType2["frontmatter"] = "frontmatter";
  LineType2["none"] = "none";
})(LineType || (LineType = {}));
var DEFAULT_SETTINGS = {
  AutoFormatting: true,
  FormattingWhenLineEnd: false,
  ChineseEnglishSpace: true,
  ChineseNoSpace: true,
  Capitalization: true,
  PunctuationSpace: true,
  EnglishSpace: true,
  BraceSpace: true,
  NumberSpace: true,
  InlineCodeSpace: true,
  InlineFormulaSpace: true,
  LinkSpace: true,
  LinkSmartSpace: true,
  FullWidthCharacterEnhance: true,
  UserDefinedRegExp: ":\\w*:\n{{.*?}}\n<.*?>\n\\[\\!.*?\\][+-]{0,1}",
  UserDefinedRegSwitch: true,
  UserPartSpace: true,
  Debug: false
};
function splitArticle(article, checkFrontMatter = true, beginIndex = 0) {
  let retArray = [];
  let lines = article.split("\n");
  console.log("line number", lines.length);
  let regNullLine = /^\s*$/;
  let regFormulaBegin = /^\s*(\- (\[[x ]\] )?)?\$\$/;
  let regFormulaEnd = /\$\$$/;
  let regCodeBegin = /^\s*```/;
  let regCodeEnd = /^\s*```$/;
  let index = beginIndex;
  let regAdmonitionBlockBegin = /^\s*```ad-\w+/g;
  if (checkFrontMatter) {
    let frontMatterPart;
    for (let i = 0; i < lines.length; i++) {
      if (regNullLine.test(lines[i])) {
        continue;
      } else if (lines[i] === "---") {
        for (let j = i + 1; j < lines.length; j++) {
          if (lines[j] === "---") {
            if (i != 0) {
              retArray.push({
                type: LineType.text,
                begin: 0,
                end: i
              });
            }
            frontMatterPart = {
              type: LineType.frontmatter,
              begin: i,
              end: j + 1
            };
            retArray.push(frontMatterPart);
            index = j + 1;
            break;
          }
        }
        break;
      } else {
        break;
      }
    }
  }
  while (index < lines.length) {
    if (regCodeBegin.test(lines[index])) {
      let j = index + 1;
      while (j < lines.length) {
        if (regCodeEnd.test(lines[j]))
          break;
        j++;
      }
      if (j === lines.length || !regAdmonitionBlockBegin.test(lines[index])) {
        j = j === lines.length ? j - 1 : j;
        retArray.push({
          type: LineType.code,
          begin: index,
          end: j + 1
        });
      } else {
        retArray.push({
          type: LineType.code,
          begin: index,
          end: index + 1
        });
        retArray.push({
          type: LineType.text,
          begin: index + 1,
          end: j
        });
        retArray.push({
          type: LineType.code,
          begin: j,
          end: j + 1
        });
      }
      index = j + 1;
    } else if (regFormulaBegin.test(lines[index])) {
      let regFormulaOneLine = /(?<!\\)\$\$(?! )[^]*?(?<! )(?<!\\)\$\$/g;
      if (regFormulaOneLine.test(lines[index])) {
        retArray.push({
          type: LineType.formula,
          begin: index,
          end: index + 1
        });
        index += 1;
      } else {
        let j = index + 1;
        while (j < lines.length) {
          if (regFormulaEnd.test(lines[j]))
            break;
          j++;
        }
        j = j === lines.length ? j - 1 : j;
        retArray.push({
          type: LineType.formula,
          begin: index,
          end: j + 1
        });
        index = j + 1;
      }
    } else {
      let j = index + 1;
      for (; j < lines.length; j++) {
        if (regCodeBegin.test(lines[j]) || regFormulaBegin.test(lines[j])) {
          break;
        }
      }
      retArray.push({
        type: LineType.text,
        begin: index,
        end: j
      });
      index = j;
    }
  }
  return retArray;
}
function reparseArticleParts(article, prevArticlePart, updateLineStart, print = false) {
  if (prevArticlePart === null || updateLineStart === 0) {
    return splitArticle(article);
  }
  let lines = article.split("\n");
  let res = [];
  let newBeginIndex = 0;
  let changeArticlePartIndex = 0;
  for (let i = 0; i < prevArticlePart.length; i++) {
    if (updateLineStart >= prevArticlePart[i].begin && updateLineStart < prevArticlePart[i].end) {
      newBeginIndex = prevArticlePart[i].begin;
      changeArticlePartIndex = i;
      break;
    } else {
      res.push(prevArticlePart[i]);
    }
  }
  let regAdmonitionBlockBegin = /```ad-\w+/g;
  if (prevArticlePart[changeArticlePartIndex].type === LineType.text && newBeginIndex != 0 && regAdmonitionBlockBegin.test(lines[newBeginIndex - 1])) {
    changeArticlePartIndex -= 1;
    res.pop();
  } else if (prevArticlePart[changeArticlePartIndex].begin === prevArticlePart[changeArticlePartIndex].end - 1 && changeArticlePartIndex >= 2 && regAdmonitionBlockBegin.test(lines[prevArticlePart[changeArticlePartIndex - 2].end - 1])) {
    changeArticlePartIndex -= 2;
    res.pop();
    res.pop();
  }
  if (changeArticlePartIndex === 0) {
    return splitArticle(article);
  }
  newBeginIndex = prevArticlePart[changeArticlePartIndex].begin;
  let newParts = splitArticle(article, false, newBeginIndex);
  for (let j = 0; j < newParts.length; j++) {
    res.push(newParts[j]);
  }
  if (print)
    new import_obsidian.Notice("Reparse Article: begin line index " + newBeginIndex.toString());
  return res;
}
function getLineTypeFromArticleParts(line, typeArray) {
  for (let i = 0; i < typeArray.length; i++) {
    if (line >= typeArray[i].begin && line < typeArray[i].end) {
      return typeArray[i].type;
    }
  }
}
function stringDeleteAt(str, index) {
  return str.substring(0, index) + str.substring(index + 1);
}
function stringInsertAt(str, index, s) {
  return str.substring(0, index) + s + str.substring(index);
}
function splitLine(line, regExps) {
  let regInlineMark = /(?<!\\)\$|(?<!\\)\`/g;
  let regFormulaInline = /(?<!\\)\$(?! )[^]+?(?<! )(?<!\\)\$/g;
  let regFormulaBlock = /(?<!\\)\$\$(?! )[^]*?(?<! )(?<!\\)\$\$/g;
  let regCode = /(?<!\\)`[^]*?(?<!\\)`/g;
  let markQueue = [];
  let arrayOfInlineTextCodeFormula = [];
  while (true) {
    let match = regInlineMark.exec(line);
    if (!match)
      break;
    markQueue.push(match);
  }
  let textBeginIndex = 0;
  while (markQueue.length != 0) {
    let mark = markQueue.shift();
    if (mark.index < textBeginIndex)
      continue;
    if (mark[0] === "$") {
      let matchFormulaBeginIndex;
      let matchFormulaLastIndex;
      regFormulaBlock.lastIndex = mark.index;
      let matchBlockFormula = regFormulaBlock.exec(line);
      if (matchBlockFormula && matchBlockFormula.index === mark.index) {
        matchFormulaBeginIndex = matchBlockFormula.index;
        matchFormulaLastIndex = regFormulaBlock.lastIndex;
      } else {
        regFormulaInline.lastIndex = mark.index;
        let matchInlineFormula = regFormulaInline.exec(line);
        if (matchInlineFormula && matchInlineFormula.index === mark.index) {
          matchFormulaBeginIndex = matchInlineFormula.index;
          matchFormulaLastIndex = regFormulaInline.lastIndex;
        } else {
          continue;
        }
      }
      if (mark.index > textBeginIndex) {
        arrayOfInlineTextCodeFormula.push({
          content: line.substring(textBeginIndex, mark.index),
          type: InlineType.text,
          begin: textBeginIndex,
          end: mark.index
        });
      }
      arrayOfInlineTextCodeFormula.push({
        content: line.substring(matchFormulaBeginIndex, matchFormulaLastIndex),
        type: InlineType.formula,
        begin: matchFormulaBeginIndex,
        end: matchFormulaLastIndex
      });
      textBeginIndex = matchFormulaLastIndex;
      continue;
    } else if (mark[0] === "`") {
      let matchCodeBeginIndex;
      let matchCodeLastIndex;
      regCode.lastIndex = mark.index;
      let matchInlineCode = regCode.exec(line);
      if (matchInlineCode && matchInlineCode.index === mark.index) {
        matchCodeBeginIndex = matchInlineCode.index;
        matchCodeLastIndex = regCode.lastIndex;
        if (mark.index > textBeginIndex) {
          arrayOfInlineTextCodeFormula.push({
            content: line.substring(textBeginIndex, mark.index),
            type: InlineType.text,
            begin: textBeginIndex,
            end: mark.index
          });
        }
        arrayOfInlineTextCodeFormula.push({
          content: line.substring(matchCodeBeginIndex, matchCodeLastIndex),
          type: InlineType.code,
          begin: matchCodeBeginIndex,
          end: matchCodeLastIndex
        });
        textBeginIndex = matchCodeLastIndex;
        continue;
      } else {
        continue;
      }
    }
  }
  if (textBeginIndex != line.length) {
    arrayOfInlineTextCodeFormula.push({
      content: line.substring(textBeginIndex),
      type: InlineType.text,
      begin: textBeginIndex,
      end: line.length
    });
  }
  let retArray = [];
  for (let i = 0; i < arrayOfInlineTextCodeFormula.length; i++) {
    if (arrayOfInlineTextCodeFormula[i].type != InlineType.text) {
      retArray.push(arrayOfInlineTextCodeFormula[i]);
    } else {
      let tempArray;
      if (regExps)
        tempArray = splitTextWithLinkAndUserDefined(arrayOfInlineTextCodeFormula[i].content, regExps);
      else
        tempArray = splitTextWithLinkAndUserDefined(arrayOfInlineTextCodeFormula[i].content);
      tempArray.forEach((item) => {
        item.begin += arrayOfInlineTextCodeFormula[i].begin;
        item.end += arrayOfInlineTextCodeFormula[i].begin;
        retArray.push(item);
      });
    }
  }
  return retArray;
}
function matchWithReg(text, regExp, type, inlineTypeArray, checkArray = false) {
  let retArray = inlineTypeArray;
  let matchArray = [];
  retArray = retArray.sort((a, b) => a.begin - b.begin);
  while (true) {
    let match = regExp.exec(text);
    if (!match)
      break;
    let valid = true;
    if (checkArray) {
      for (let i = 0; i < retArray.length; i++) {
        if (match.index <= retArray[i].begin) {
          if (regExp.lastIndex <= retArray[i].begin) {
            valid = true;
            break;
          } else if (regExp.lastIndex <= retArray[i].end) {
            valid = false;
            break;
          } else if (regExp.lastIndex > retArray[i].end) {
            let removeCount = 1;
            valid = true;
            for (let j = i + 1; j < retArray.length; j++) {
              if (regExp.lastIndex <= retArray[j].begin) {
                removeCount = j - i;
                valid = true;
                break;
              } else if (regExp.lastIndex < retArray[j].end) {
                valid = false;
                break;
              } else {
                continue;
              }
            }
            if (valid) {
              retArray.splice(i, removeCount);
              i -= 1;
            }
            break;
          }
        }
        if (match.index > retArray[i].begin && match.index < retArray[i].end) {
          valid = false;
          break;
        }
      }
    }
    if (!valid)
      continue;
    matchArray.push({
      content: match[0],
      type,
      begin: match.index,
      end: regExp.lastIndex
    });
  }
  retArray = retArray.concat(matchArray);
  return retArray;
}
function splitTextWithLinkAndUserDefined(text, regExps) {
  let retArray = [];
  let regWikiLink = /\!?\[\[[^\[\]]*?\]\]/g;
  let regMdLink = /\!?\[[^\[\]]*?\]\([^\s\)\(\[\]\{\}']*\)/g;
  let regBareLink = /(https?:\/\/|ftp:\/\/|obsidian:\/\/|zotero:\/\/|www.)[^\s（）《》。，！？；：“”‘’\)\(\[\]\{\}']+/g;
  retArray = matchWithReg(text, regWikiLink, InlineType.link, retArray);
  retArray = matchWithReg(text, regMdLink, InlineType.link, retArray);
  let regExpList = [];
  if (regExps) {
    let regs = regExps.split("\n");
    for (let i = 0; i < regs.length; i++) {
      let regNull = /^\s*$/g;
      if (regNull.test(regs[i]))
        continue;
      let isValidReg = true;
      try {
        let regTemp = new RegExp(regs[i], "g");
      } catch (error) {
        isValidReg = false;
        new import_obsidian.Notice("Bad RegExp:" + regs[i]);
      }
      if (isValidReg) {
        regExpList.push(new RegExp(regs[i], "g"));
      }
    }
    let regLen = regExpList.length;
    for (let i = 0; i < regLen; i++) {
      retArray = matchWithReg(text, regExpList[i], InlineType.user, retArray, true);
    }
  }
  retArray = matchWithReg(text, regBareLink, InlineType.link, retArray, true);
  retArray = retArray.sort((a, b) => a.begin - b.begin);
  let textArray = [];
  let textBegin = 0;
  let textEnd = 0;
  for (let i = 0; i < retArray.length; i++) {
    if (textBegin < retArray[i].begin) {
      textEnd = retArray[i].begin;
      textArray.push({
        content: text.substring(textBegin, textEnd),
        type: InlineType.text,
        begin: textBegin,
        end: textEnd
      });
    }
    textBegin = retArray[i].end;
  }
  if (textBegin != text.length) {
    textArray.push({
      content: text.substring(textBegin, text.length),
      type: InlineType.text,
      begin: textBegin,
      end: text.length
    });
  }
  retArray = retArray.concat(textArray);
  retArray = retArray.sort((a, b) => a.begin - b.begin);
  return retArray;
}
function formatLine(line, curCursor, settings, prevCursor) {
  let ch = curCursor.ch;
  if (line === "")
    return ["", 0, []];
  let lineParts;
  if (settings.UserDefinedRegSwitch) {
    lineParts = splitLine(line, settings.UserDefinedRegExp);
  } else {
    lineParts = splitLine(line);
  }
  let linePartsOrigin = JSON.parse(JSON.stringify(lineParts));
  let inlineChangeList = [];
  let cursorLinePartIndex = -1;
  let cursorRelativeIndex = -1;
  let resultCursorCh = 0;
  for (let i = 0; i < lineParts.length; i++) {
    if (ch > lineParts[i].begin && ch <= lineParts[i].end) {
      cursorLinePartIndex = i;
      cursorRelativeIndex = ch - lineParts[i].begin;
      if (lineParts[i].type === InlineType.text) {
        lineParts[i].content = stringInsertAt(lineParts[i].content, cursorRelativeIndex, "\0");
      }
      break;
    }
  }
  let resultLine = "";
  let offset = 0;
  let prevPartType = InlineType.none;
  let prevTextEndWithSpace = false;
  for (let i = 0; i < lineParts.length; i++) {
    if (i === 0 && lineParts[i].type === InlineType.text && settings.Capitalization) {
      if (prevCursor && cursorLinePartIndex != 0) {
      } else {
        let regFirstSentence = /^\s*(\- (\[[x ]\] )?)?[a-z]/g;
        let regHeaderSentence = /^(#+ |>+ ?)[a-z]/g;
        let textcopy = lineParts[0].content;
        let match = regFirstSentence.exec(textcopy);
        let matchHeader = regHeaderSentence.exec(textcopy);
        let dstCharIndex = -1;
        if (match) {
          dstCharIndex = regFirstSentence.lastIndex - 1;
        } else if (matchHeader) {
          dstCharIndex = regHeaderSentence.lastIndex - 1;
        }
        if (!prevCursor) {
        } else if (prevCursor.line === curCursor.line && dstCharIndex >= prevCursor.ch && dstCharIndex < curCursor.ch) {
        } else {
          dstCharIndex = -1;
        }
        if (dstCharIndex != -1) {
          lineParts[0].content = textcopy.substring(0, dstCharIndex) + textcopy.charAt(dstCharIndex).toUpperCase() + textcopy.substring(dstCharIndex + 1);
        }
      }
    }
    switch (lineParts[i].type) {
      case InlineType.text:
        let content = lineParts[i].content;
        if (settings.Capitalization) {
          var reg = /[\.\?\!。！？]([\s]*)[a-z]/g;
          while (true) {
            let match = reg.exec(content);
            if (!match)
              break;
            let tempIndex = reg.lastIndex - 1;
            if (!prevCursor) {
              lineParts[i].content = content.substring(0, tempIndex) + content.charAt(tempIndex).toUpperCase() + content.substring(reg.lastIndex);
              content = lineParts[i].content;
            } else if (prevCursor && cursorLinePartIndex === i && prevCursor.line === curCursor.line) {
              if (tempIndex >= prevCursor.ch - offset && tempIndex < curCursor.ch - offset) {
                lineParts[i].content = content.substring(0, tempIndex) + content.charAt(tempIndex).toUpperCase() + content.substring(reg.lastIndex);
                content = lineParts[i].content;
              }
            }
          }
        }
        if (settings.ChineseEnglishSpace) {
          let reg1 = /([A-Za-z0-9,\.;\?:!])([\u4e00-\u9fa5]+)/gi;
          let reg22 = /([\u4e00-\u9fa5]+)([A-Za-z0-9])/gi;
          lineParts[i].content = content.replace(reg1, "$1 $2").replace(reg22, "$1 $2");
          content = lineParts[i].content;
        }
        if (settings.ChineseNoSpace) {
          let reg3 = /([\u4e00-\u9fa5，。、；‘’《》]+)(\s+)([\u4e00-\u9fa5，。、；‘’《》]+)/g;
          while (reg3.exec(content)) {
            lineParts[i].content = content.replace(reg3, "$1$3");
            content = lineParts[i].content;
          }
        }
        if (settings.PunctuationSpace) {
          {
            let reg3 = /([,\.;\?\!])([A-Za-z])/gi;
            while (true) {
              let match = reg3.exec(content);
              if (!match)
                break;
              let tempIndex = reg3.lastIndex - 1;
              if (!prevCursor) {
                content = content.substring(0, tempIndex) + " " + content.substring(tempIndex);
              } else if (prevCursor && cursorLinePartIndex === i && prevCursor.line === curCursor.line) {
                if (tempIndex >= prevCursor.ch - offset && tempIndex < curCursor.ch - offset) {
                  content = content.substring(0, tempIndex) + " " + content.substring(tempIndex);
                }
              }
            }
            var reg2 = /(:)([A-Za-z0-9_]+[ ,\.\?\\\/;'"，。？；‘“”’、\[\]\-\{\}])/gi;
            lineParts[i].content = content.replace(reg2, "$1 $2");
            content = lineParts[i].content;
          }
          {
            let reg1 = /(\))([A-Za-z0-9\u4e00-\u9fa5]+)/gi;
            let reg22 = /([A-Za-z0-9\u4e00-\u9fa5:,\.\?\!'"]+)(\()/gi;
            lineParts[i].content = content.replace(reg1, "$1 $2").replace(reg22, "$1 $2");
            content = lineParts[i].content;
          }
          {
            let reg1 = /([,;\?\!\]\}])([0-9])/g;
            let reg22 = /([0-9])([\[\{])/g;
            lineParts[i].content = content.replace(reg1, "$1 $2").replace(reg22, "$1 $2");
            content = lineParts[i].content;
          }
        }
        let regStartWithSpace = /^\0?[\s,\.;\?\!，。；？！、（）\]\)\}]/;
        let regEndWithSpace = /[\s，。、：；？！（）\[\(\{]\0?$/;
        let textStartWithSpace = regStartWithSpace.test(content);
        let textEndWithSpace = regEndWithSpace.test(content);
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace && !textStartWithSpace) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace && !textStartWithSpace) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
            }
            break;
          case InlineType.link:
            if (lineParts[i].content.charAt(0) === " ")
              break;
            let regBareLink = /^(https?:\/\/|ftp:\/\/|obsidian:\/\/|zotero:\/\/|www.)[^\s（）《》。,;:，！？；：“”‘’\)\(\[\]\{\}']+/g;
            let isBareLink = false;
            isBareLink = regBareLink.test(lineParts[i - 1].content);
            if (isBareLink) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
              break;
            }
            if (settings.LinkSmartSpace && !textStartWithSpace) {
              let regTestWikiLink = /\!?\[\[[^\[\]]*?\]\]/;
              let regMdLink = /\!?\[[^\[\]]*?\]\([^\s\)\(\[\]\{\}']*\)/g;
              let regNoNeedSpace = /[\u4e00-\u9fa5][\u4e00-\u9fa5]/g;
              let twoNeighborChars = "";
              let charAtTextBegin = lineParts[i].content.charAt(0);
              let charAtLinkEnd = "";
              let linkWithNoText = false;
              if (regTestWikiLink.test(lineParts[i - 1].content)) {
                charAtLinkEnd = lineParts[i - 1].content.charAt(lineParts[i - 1].content.length - 3);
                if (charAtLinkEnd === "[")
                  linkWithNoText = true;
              } else if (regMdLink.test(lineParts[i - 1].content)) {
                let regMdLinkEnd = /\]/;
                let charAtLinkEndIndex = lineParts[i - 1].content.search(regMdLinkEnd) - 1;
                charAtLinkEnd = lineParts[i - 1].content.charAt(charAtLinkEndIndex);
                if (charAtLinkEnd === "[")
                  linkWithNoText = true;
              }
              twoNeighborChars = charAtLinkEnd + charAtTextBegin;
              if (!linkWithNoText && !regNoNeedSpace.test(twoNeighborChars)) {
                lineParts[i].content = " " + content;
                content = lineParts[i].content;
              }
            } else if (!settings.LinkSmartSpace && settings.LinkSpace && !textStartWithSpace) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace && !textStartWithSpace) {
              lineParts[i].content = " " + content;
              content = lineParts[i].content;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          let reg3 = "\0";
          let n = content.search(reg3);
          resultCursorCh = offset + n;
          lineParts[i].content = stringDeleteAt(content, n);
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.text;
        prevTextEndWithSpace = textEndWithSpace;
        break;
      case InlineType.code:
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.text:
            if (settings.InlineCodeSpace && !prevTextEndWithSpace) {
              lineParts[i - 1].content += " ";
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace || settings.InlineCodeSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.link:
            if (settings.LinkSpace || settings.InlineCodeSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace || settings.InlineCodeSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          resultCursorCh = offset + cursorRelativeIndex;
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.code;
        prevTextEndWithSpace = false;
        break;
      case InlineType.formula:
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.text:
            if (settings.InlineFormulaSpace && !prevTextEndWithSpace) {
              lineParts[i - 1].content += " ";
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace || settings.InlineFormulaSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.link:
            if (settings.LinkSpace || settings.InlineFormulaSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace || settings.InlineFormulaSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          resultCursorCh = offset + cursorRelativeIndex;
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.formula;
        prevTextEndWithSpace = false;
        break;
      case InlineType.link:
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.text:
            let charAtTextEnd = lineParts[i - 1].content.charAt(lineParts[i - 1].content.length - 1);
            if (charAtTextEnd === " ")
              break;
            if (settings.LinkSmartSpace && !prevTextEndWithSpace) {
              let regTestWikiLink = /\!?\[\[[^\[\]]*?\]\]/;
              let regMdLink = /\!?\[[^\[\]]*?\]\([^\s\)\(\[\]\{\}']*\)/g;
              let regNoNeedSpace = /[\u4e00-\u9fa5][\u4e00-\u9fa5]/g;
              let isBareLink = false;
              let twoNeighborChars = "";
              let charAtLinkBegin = "";
              let linkWithNoText = false;
              if (regTestWikiLink.test(lineParts[i].content)) {
                let beginIndex = 2;
                if (lineParts[i].content.charAt(0) === "!")
                  beginIndex = 3;
                charAtLinkBegin = lineParts[i].content.charAt(beginIndex);
                if (charAtLinkBegin === "]")
                  linkWithNoText = true;
              } else if (regMdLink.test(lineParts[i].content)) {
                let regMdLinkBegin = /\[/;
                let charAtLinkBeginIndex = lineParts[i].content.search(regMdLinkBegin) + 1;
                charAtLinkBegin = lineParts[i].content.charAt(charAtLinkBeginIndex);
                if (charAtLinkBegin === "]")
                  linkWithNoText = true;
              } else {
                isBareLink = true;
              }
              twoNeighborChars = charAtTextEnd + charAtLinkBegin;
              if (!linkWithNoText && (isBareLink || !regNoNeedSpace.test(twoNeighborChars))) {
                lineParts[i - 1].content += " ";
                resultLine += " ";
                offset += 1;
              }
            } else if (settings.LinkSpace && !prevTextEndWithSpace) {
              lineParts[i - 1].content += " ";
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace || settings.LinkSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace || settings.LinkSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.link:
            if (settings.LinkSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace || settings.LinkSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          resultCursorCh = offset + cursorRelativeIndex;
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.link;
        prevTextEndWithSpace = false;
        break;
      case InlineType.user:
        switch (prevPartType) {
          case InlineType.none:
            break;
          case InlineType.text:
            if (settings.UserPartSpace && !prevTextEndWithSpace) {
              lineParts[i - 1].content += " ";
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.code:
            if (settings.InlineCodeSpace || settings.UserPartSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.formula:
            if (settings.InlineFormulaSpace || settings.UserPartSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.link:
            if (settings.LinkSpace || settings.UserPartSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
          case InlineType.user:
            if (settings.UserPartSpace) {
              inlineChangeList.push({
                text: " ",
                begin: lineParts[i].begin,
                end: lineParts[i].begin,
                origin: ""
              });
              resultLine += " ";
              offset += 1;
            }
            break;
        }
        if (i === cursorLinePartIndex) {
          resultCursorCh = offset + cursorRelativeIndex;
        }
        resultLine += lineParts[i].content;
        offset += lineParts[i].content.length;
        prevPartType = InlineType.user;
        prevTextEndWithSpace = false;
        break;
    }
  }
  for (let i = 0; i < lineParts.length; i++) {
    if (lineParts[i].type === InlineType.text && lineParts[i].content != linePartsOrigin[i].content) {
      inlineChangeList.push({
        text: lineParts[i].content,
        begin: linePartsOrigin[i].begin,
        end: linePartsOrigin[i].end,
        origin: linePartsOrigin[i].content
      });
    }
  }
  inlineChangeList = inlineChangeList.sort((a, b) => a.begin - b.begin);
  return [resultLine, resultCursorCh, inlineChangeList];
}
function isPositionBefore(pos1, pos2) {
  if (pos1.line < pos2.line)
    return true;
  else if (pos1.line > pos2.line)
    return false;
  else {
    if (pos1.ch < pos2.ch)
      return true;
    else
      return false;
  }
}

// main.ts
function setAttributes(element, attributes) {
  for (let key in attributes) {
    element.setAttribute(key, attributes[key]);
  }
}
var EasyTypingPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.getEditor = () => {
      let editor = null;
      let markdownView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (markdownView) {
        editor = markdownView.editor;
      }
      if (editor === null && this.settings.Debug)
        console.log("can't get editor");
      return editor;
    };
    this.formatArticle = () => {
      if (this.settings.Debug) {
        console.log("Begin format Article");
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.updateArticleParts(editor);
      let lineCount = editor.lineCount();
      for (let i = 0; i < lineCount; i++) {
        if (this.isTextPart(i)) {
          this.FormatLineWithoutCheckPart(editor, i);
        }
      }
      if (this.settings.Debug) {
        new import_obsidian2.Notice("Format Article Done!");
      }
    };
    this.formatSelection = () => {
      if (this.settings.Debug) {
        console.log("Begin format Selection");
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.updateArticleParts(editor);
      if (!editor.somethingSelected() || editor.getSelection() === "") {
        let lineNumber = editor.getCursor().line;
        if (this.isTextPart(lineNumber)) {
          this.FormatLineWithoutCheckPart(editor, lineNumber);
        }
        editor.setCursor({ line: lineNumber, ch: editor.getLine(lineNumber).length });
        return;
      }
      let selection = editor.listSelections()[0];
      let lineBeginReparse = selection.anchor.line;
      if (lineBeginReparse > selection.head.line) {
        lineBeginReparse = selection.head.line;
      }
      this.reparseArticle = { check: true, beginLineNumber: lineBeginReparse };
      let selectedArticle = editor.getSelection();
      let articleParts = splitArticle(selectedArticle);
      let lines = selectedArticle.split("\n");
      let result = "";
      for (let i = 0; i < articleParts.length; i++) {
        if (articleParts[i].type != LineType.text) {
          for (let j = articleParts[i].begin; j < articleParts[i].end; j++) {
            let line = lines[j];
            result += line + "\n";
          }
        } else {
          for (let j = articleParts[i].begin; j < articleParts[i].end; j++) {
            let line = lines[j];
            let newline = formatLine(line, { line: 0, ch: line.length }, this.settings)[0];
            result += newline + "\n";
          }
        }
      }
      result = result.substring(0, result.length - 1);
      editor.replaceSelection(result);
      this.updateArticleParts(editor);
      if (this.settings.Debug) {
        new import_obsidian2.Notice("Format Selection Done!");
        console.log("End format Selection");
      }
    };
    this.handleBeforeInput = (ev) => {
      if (this.settings.Debug)
        console.log("===> Before Input");
      if (!this.settings.FullWidthCharacterEnhance)
        return;
      let editor = this.getEditor();
      if (!editor)
        return;
      let specialChar = new Set(["\u3010", "\u3011", "\xB7", "=", "\u201C", "\u201D", "\u300A", "\u300B", "\u2018", "\u2019", "\uFF08", "\uFF09", "\uFFE5"]);
      if (editor.somethingSelected() && editor.getSelection() != "") {
        if (ev.data.length != 1 || specialChar.has(editor.getSelection()))
          return;
        let selectedFormatRange = editor.listSelections()[0];
        let begin;
        let end;
        let anchor;
        let head;
        if (isPositionBefore(selectedFormatRange.anchor, selectedFormatRange.head)) {
          begin = selectedFormatRange.anchor;
        } else {
          begin = selectedFormatRange.head;
        }
        end = { line: begin.line, ch: begin.ch + 1 };
        anchor = { line: selectedFormatRange.anchor.line, ch: selectedFormatRange.anchor.ch + 1 };
        head = { line: selectedFormatRange.head.line, ch: selectedFormatRange.head.ch + 1 };
        let text;
        switch (ev.data) {
          case "\u3010":
          case "\u3011":
            text = "[" + editor.getSelection() + "]";
            break;
          case "\xB7":
            text = "`" + editor.getSelection() + "`";
            this.reparseArticle.check = true;
            this.reparseArticle.beginLineNumber = begin.line;
            break;
          case "\uFFE5":
          case "\xA5":
            text = "$" + editor.getSelection() + "$";
            this.reparseArticle.check = true;
            this.reparseArticle.beginLineNumber = begin.line;
            break;
          case "\u201C":
          case "\u201D":
            text = "\u201C" + editor.getSelection() + "\u201D";
            break;
          case "\u2018":
          case "\u2019":
            text = "\u2018" + editor.getSelection() + "\u2019";
            break;
          case "\u300A":
          case "\u300B":
            text = "\u300A" + editor.getSelection() + "\u300B";
            break;
          case "\uFF08":
          case "\uFF09":
            console.log("I am here");
            text = "\uFF08" + editor.getSelection() + "\uFF09";
            break;
          case "{":
          case "}":
            text = "{" + editor.getSelection() + "}";
            break;
          default:
            this.prevCursor = begin;
            let regReparse = /^[\-\$\`]|[\-\$\`]\s*$|\n/m;
            let reg = /[-\`\$]/;
            if (regReparse.test(editor.getSelection()) || reg.test(ev.data)) {
              this.reparseArticle.check = true;
              this.reparseArticle.beginLineNumber = begin.line;
            }
            this.selectionTextChange = null;
            return;
        }
        this.selectionTextChange = {
          begin,
          end,
          text,
          selection: true,
          selectionAnchor: anchor,
          selectionHead: head
        };
      }
    };
    this.handleKeydown = (evt) => {
      if (this.settings.Debug) {
        console.log("=========================");
        console.log("keydown:", evt.key);
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.keyDownFlag = true;
      if (evt.key === "Control")
        this.ctrlDownLineIndex = editor.getCursor().line;
    };
    this.handleKeyup = (evt) => {
      if (this.settings.Debug) {
        console.log("=========================");
        console.log("keyup:", evt.key);
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.keyDownFlag = false;
      if (evt.key === "Process" || evt.key === "Shift") {
        return;
      }
      if (evt.key != "Backspace" && evt.key != "Enter" && evt.key != "Delete") {
        this.updateSelection(editor);
      }
      if (this.selectionTextChange && this.settings.AutoFormatting) {
        editor.replaceRange(this.selectionTextChange.text, this.selectionTextChange.begin, this.selectionTextChange.end);
        editor.setSelection(this.selectionTextChange.selectionAnchor, this.selectionTextChange.selectionHead);
        this.prevCursor = this.selectionTextChange.selectionHead;
        this.selectionTextChange = null;
        this.editorChanged = false;
        return;
      }
      this.selectionTextChange = null;
      if (!this.editorChanged || this.settings.AutoFormatting === false) {
        this.prevCursor = editor.getCursor();
        this.editorChanged = false;
        return;
      }
      if (evt.ctrlKey && (evt.key === "z" || evt.key === "y" || evt.key === "x")) {
        let lineReparseBegin = editor.getCursor().line;
        if (lineReparseBegin > this.ctrlDownLineIndex) {
          lineReparseBegin = this.ctrlDownLineIndex;
        }
        this.reparseArticle = { check: true, beginLineNumber: lineReparseBegin };
        this.updateArticleParts(editor);
        this.prevCursor = editor.getCursor();
        this.editorChanged = false;
        return;
      }
      let regTestReparse = /^[\-\$`]|[\-\$\`]\s*$|\n|\$\$|---|```/gm;
      let cs = editor.getCursor();
      let charAfterCursor = editor.getRange({ line: cs.line, ch: cs.ch }, { line: cs.line, ch: cs.ch + 1 });
      switch (evt.key) {
        case "Backspace":
          if (this.selectedText != "" && !regTestReparse.test(this.selectedText) || this.selectedText === "" && !regTestReparse.test(this.charBeforeCursor)) {
            this.reparseArticle.check = false;
          } else {
            this.reparseArticle = { check: true, beginLineNumber: editor.getCursor().line };
          }
          this.updateSelection(editor);
          this.prevCursor = editor.getCursor();
          this.editorChanged = false;
          this.updateArticleParts(editor);
          return;
        case "Delete":
          if (this.selectedText != "" && !regTestReparse.test(this.selectedText) || this.selectedText === "" && !regTestReparse.test(this.charAfterCursor)) {
            this.reparseArticle.check = false;
          } else {
            this.reparseArticle = { check: true, beginLineNumber: editor.getCursor().line };
          }
          this.updateSelection(editor);
          this.prevCursor = editor.getCursor();
          this.editorChanged = false;
          this.updateArticleParts(editor);
          return;
        case "Enter":
          let prevLineIndex = editor.getCursor().line - 1;
          prevLineIndex = prevLineIndex > 0 ? prevLineIndex : 0;
          if (!evt.ctrlKey)
            this.reparseArticle = { check: true, beginLineNumber: editor.getCursor().line - 1 };
          this.updateArticleParts(editor);
          if (this.isTextPart(prevLineIndex)) {
            if (this.settings.FormattingWhenLineEnd) {
              this.FormatLineWithoutCheckPart(editor, prevLineIndex);
            } else {
              let prevLineEndCursor = { line: prevLineIndex, ch: editor.getLine(prevLineIndex).length };
              this.updateLine(editor, prevLineIndex, prevLineEndCursor, this.settings, prevLineEndCursor, editor.getCursor());
            }
          }
          this.updateSelection(editor);
          this.prevCursor = editor.getCursor();
          this.editorChanged = false;
          return;
        default:
          break;
      }
      let cursor = editor.getCursor();
      {
        let twoCharactersBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
        let threeCharactersBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 3 }, { line: cursor.line, ch: cursor.ch });
        if (twoCharactersBeforeCursor === "$$" || threeCharactersBeforeCursor === "```" || threeCharactersBeforeCursor == "---") {
          this.reparseArticle = { check: true, beginLineNumber: cursor.line };
        }
      }
      if (this.settings.FullWidthCharacterEnhance && !editor.somethingSelected()) {
        let twoCharactersBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
        let charBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
        let twoCharactersNearCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch + 1 });
        let character2cursor1 = editor.getRange({ line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
        let twoCharactersAfterCursor = editor.getRange({ line: cursor.line, ch: cursor.ch }, { line: cursor.line, ch: cursor.ch + 2 });
        switch (evt.key) {
          case "$":
          case "\uFFE5":
          case "\xA5":
            if (twoCharactersBeforeCursor === "\uFFE5\uFFE5" || twoCharactersBeforeCursor === "\xA5\xA5") {
              editor.replaceRange("$$", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            } else if (twoCharactersBeforeCursor === "$$") {
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            } else if (character2cursor1 === "$\uFFE5$" || character2cursor1 === "$\xA5$") {
              editor.replaceRange("$$", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor(cursor);
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            }
            break;
          case "[":
          case "\u3010":
            if (twoCharactersBeforeCursor === "[[" && twoCharactersAfterCursor != "]]" && !editor.somethingSelected()) {
              editor.replaceRange("[[]]", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor(cursor);
            }
            break;
          case "`":
          case "\xB7":
            if (twoCharactersBeforeCursor === "\xB7\xB7") {
              editor.replaceRange("``", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            } else if (character2cursor1 === "`\xB7`") {
              editor.replaceRange("`", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch + 1 });
              this.reparseArticle = { check: true, beginLineNumber: cursor.line };
            }
            break;
          case "\uFF1A":
          case ":":
          case `;`:
          case `\uFF1B`:
            if (twoCharactersBeforeCursor === "\uFF1B\uFF1B") {
              editor.replaceRange(";", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            } else if (twoCharactersBeforeCursor === "\uFF1A\uFF1A") {
              editor.replaceRange(":", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case `,`:
          case `\uFF0C`:
            if (twoCharactersBeforeCursor === "\uFF0C\uFF0C") {
              editor.replaceRange(",", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "\u3001":
          case "/":
            if (cursor.ch === 1 && charBeforeCursor === "\u3001") {
              editor.replaceRange("/", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u3001\u3001") {
              editor.replaceRange("/", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "\u3002":
          case ".":
            if (twoCharactersBeforeCursor === "\u3002\u3002") {
              editor.replaceRange(".", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "(":
          case "\uFF08":
            if (charBeforeCursor === "\uFF08" && twoCharactersNearCursor != "\uFF08\uFF09") {
              editor.replaceRange("\uFF08\uFF09", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\uFF08\uFF08" && twoCharactersNearCursor === "\uFF08\uFF09") {
              editor.replaceRange("()", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "\u300B":
          case ">":
            if (cursor.ch === 1 && charBeforeCursor === "\u300B") {
              editor.replaceRange(">", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u300B\u300B") {
              editor.replaceRange(">", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            } else if (twoCharactersBeforeCursor === ">\u300B") {
              editor.replaceRange(">", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor(cursor);
            }
            break;
          case "<":
          case "\u300A":
            if (charBeforeCursor === "\u300A" && twoCharactersNearCursor != "\u300A\u300B") {
              editor.replaceRange("\u300A\u300B", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u300A\u300A" && twoCharactersNearCursor === "\u300A\u300B") {
              editor.replaceRange("<", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "!":
          case "\uFF01":
            if (twoCharactersBeforeCursor === "\uFF01\uFF01") {
              editor.replaceRange("!", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "|":
          case "\uFF5C":
            if (twoCharactersBeforeCursor === "\uFF5C\uFF5C") {
              editor.replaceRange("|", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case '"':
            if (charBeforeCursor === "\u201C" && twoCharactersNearCursor != "\u201C\u201D") {
              editor.replaceRange("\u201C\u201D", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u201C\u201D" && twoCharactersNearCursor === "\u201D\u201D") {
              editor.replaceRange('""', { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          case "'":
            if (charBeforeCursor === "\u2018" && twoCharactersNearCursor != "\u2018\u2019") {
              editor.replaceRange("\u2018\u2019", { line: cursor.line, ch: cursor.ch - 1 }, { line: cursor.line, ch: cursor.ch });
              editor.setCursor({ line: cursor.line, ch: cursor.ch });
            } else if (twoCharactersBeforeCursor === "\u2018\u2019" && twoCharactersNearCursor === "\u2019\u2019") {
              editor.replaceRange("''", { line: cursor.line, ch: cursor.ch - 2 }, { line: cursor.line, ch: cursor.ch + 1 });
              editor.setCursor({ line: cursor.line, ch: cursor.ch - 1 });
            }
            break;
          default:
            break;
        }
      }
      cursor = editor.getCursor();
      this.updateSelection(editor);
      this.updateArticleParts(editor);
      if (getLineTypeFromArticleParts(cursor.line, this.articleParts) != LineType.text) {
        this.prevCursor = editor.getCursor();
        this.editorChanged = false;
        return;
      }
      if (!this.settings.FormattingWhenLineEnd) {
        this.updateLine(editor, cursor.line, cursor, this.settings, this.prevCursor);
      }
      this.prevCursor = editor.getCursor();
      this.editorChanged = false;
    };
    this.isTextPart = (lineIndex) => {
      if (getLineTypeFromArticleParts(lineIndex, this.articleParts) === LineType.text) {
        return true;
      }
      return false;
    };
    this.handleClick = () => {
      if (this.settings.Debug)
        console.log("===>Click event triggered");
      let editor = this.getEditor();
      if (!editor)
        return;
      this.prevCursor = editor.getCursor();
      this.updateSelection(editor);
    };
    this.handleFileOpen = (file) => {
      if (file != null) {
        if (this.settings.Debug)
          console.log("===>File open:", file.vault.getName() + "/" + file.path);
        this.reparseArticle = { check: true, beginLineNumber: 0 };
        this.articleParts = null;
      }
    };
    this.handlePaste = (evt, editor, markdownView) => {
      let cursor = editor.getCursor();
      if (this.settings.Debug) {
        console.log("===>Before-Paste");
      }
      this.reparseArticle = { check: true, beginLineNumber: cursor.line };
      this.updateArticleParts(editor);
    };
    this.handleChange = (editor, markdownView) => {
      if (this.settings.Debug) {
        console.log("===>Change Event");
      }
      this.editorChanged = true;
    };
    this.handleSelectBegin = (ev) => {
      if (this.keyDownFlag)
        return;
      if (this.settings.Debug) {
        console.log("===>Select Event");
      }
      let editor = this.getEditor();
      if (!editor)
        return;
      this.updateSelection(editor);
    };
    this.updateArticleParts = (editor) => {
      if (this.reparseArticle.check || this.articleParts === null) {
        this.articleParts = reparseArticleParts(editor.getValue(), this.articleParts, this.reparseArticle.beginLineNumber, this.settings.Debug);
        this.reparseArticle.check = false;
      }
    };
    this.printArticleParts = (editor) => {
      let article = editor.getValue();
      let lines = article.split("\n");
      console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      for (let i = 0; i < this.articleParts.length; i++) {
        console.log("Article Part:", this.articleParts[i].type, this.articleParts[i].begin, this.articleParts[i].end);
        for (let j = this.articleParts[i].begin; j < this.articleParts[i].end; j++) {
          console.log(lines[j]);
        }
      }
      console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
    };
    this.updateSelection = (editor) => {
      this.selectedText = editor.getSelection();
      this.updateCharAroundCursor(editor);
    };
    this.updateCharAroundCursor = (editor) => {
      if (this.selectedText != "")
        return;
      let cursor = editor.getCursor();
      if (cursor.ch != 0) {
        this.charBeforeCursor = editor.getRange({ line: cursor.line, ch: cursor.ch - 1 }, cursor);
      } else {
        this.charBeforeCursor = cursor.line != 0 ? "\n" : "";
      }
      if (cursor.ch != editor.getLine(cursor.line).length) {
        this.charAfterCursor = editor.getRange(cursor, { line: cursor.line, ch: cursor.ch + 1 });
      } else {
        this.charAfterCursor = cursor.line != editor.lineCount() - 1 ? "\n" : "";
      }
    };
    this.FormatLineWithoutCheckPart = (editor, line) => {
      let lineString = editor.getLine(line);
      let cs = { line, ch: lineString.length };
      let formattedChange = formatLine(lineString, cs, this.settings);
      let changedLine = formattedChange[0];
      if (changedLine != lineString) {
        editor.replaceRange(changedLine, { line, ch: 0 }, cs);
      }
    };
    this.updateLine = (editor, lineIndex, curCursor, settings, prevCursor, setCursor) => {
      let formattedChange = formatLine(editor.getLine(lineIndex), curCursor, this.settings, this.prevCursor);
      let resultLine = formattedChange[0];
      let resultCurosrCh = formattedChange[1];
      let inlineChangeList = formattedChange[2];
      if (inlineChangeList.length != 0) {
        let offset = 0;
        for (let i = 0; i < inlineChangeList.length; i++) {
          let changeBegin = {
            line: lineIndex,
            ch: inlineChangeList[i].begin + offset
          };
          let changeEnd = {
            line: lineIndex,
            ch: inlineChangeList[i].end + offset
          };
          offset += inlineChangeList[i].text.length - inlineChangeList[i].origin.length;
          editor.replaceRange(inlineChangeList[i].text, changeBegin, changeEnd);
        }
        if (!setCursor) {
          editor.setCursor({
            line: lineIndex,
            ch: resultCurosrCh
          });
        } else {
          editor.setCursor(setCursor);
        }
        editor.focus();
      }
    };
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.prevCursor = { line: 0, ch: 0 };
      this.selectionTextChange = null;
      this.editorChanged = false;
      this.keyUpdateCursor = new Set(["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"]);
      this.articleParts = null;
      this.reparseArticle = {
        check: true,
        beginLineNumber: 0
      };
      this.keyDownFlag = false;
      this.selectedText = "";
      this.charBeforeCursor = "";
      this.charAfterCursor = "";
      this.ctrlDownLineIndex = 0;
      this.addCommand({
        id: "easy-typing-format-selection",
        name: "format selected text",
        callback: () => this.formatSelection(),
        hotkeys: [{
          modifiers: ["Ctrl", "Shift"],
          key: "s"
        }]
      });
      this.addCommand({
        id: "easy-typing-format-article",
        name: "format current article",
        callback: () => this.formatArticle(),
        hotkeys: [{
          modifiers: ["Ctrl", "Alt"],
          key: "l"
        }]
      });
      this.addCommand({
        id: "easy-typing-format-switch",
        name: "switch autoformat",
        callback: () => this.switchAutoFormatting(),
        hotkeys: [{
          modifiers: ["Ctrl"],
          key: "tab"
        }]
      });
      this.addSettingTab(new EasyTypingSettingTab(this.app, this));
      this.registerEvent(this.app.workspace.on("editor-change", this.handleChange));
      this.registerEvent(this.app.workspace.on("editor-paste", this.handlePaste));
      this.registerEvent(this.app.workspace.on("file-open", this.handleFileOpen));
      this.registerEvent(this.app.workspace.on("click", this.handleClick));
      this.registerDomEvent(document, "keyup", this.handleKeyup);
      this.registerDomEvent(document, "keydown", this.handleKeydown);
      this.registerDomEvent(document, "beforeinput", this.handleBeforeInput);
      this.registerDomEvent(document, "selectionchange", this.handleSelectBegin);
    });
  }
  onunload() {
  }
  switchAutoFormatting() {
    this.settings.AutoFormatting = this.settings.AutoFormatting ? false : true;
    let status = this.settings.AutoFormatting ? "on" : "off";
    new import_obsidian2.Notice("Autoformat is " + status + "!");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var EasyTypingSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("a", { text: "More detail is in Github: easy-typing-obsidian", href: "https://github.com/Yaozhuwa/easy-typing-obsidian" });
    containerEl.createEl("h2", { text: "\u603B\u5F00\u5173 (Master Switch)" });
    new import_obsidian2.Setting(containerEl).setName("Auto formatting when typing").setDesc("\u662F\u5426\u5728\u7F16\u8F91\u6587\u6863\u65F6\u81EA\u52A8\u683C\u5F0F\u5316\u6587\u672C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.AutoFormatting).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.AutoFormatting = value;
        console.log("AutoFormatting:", value);
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("LineMode: Only formatting when line end.").setDesc("\u884C\u6A21\u5F0F\uFF1A\u53EA\u5728\u4E00\u884C\u8F93\u5165\u7ED3\u675F\uFF0C\u56DE\u8F66\u521B\u5EFA\u65B0\u884C\u7684\u65F6\u5019\uFF0C\u5BF9\u8BE5\u884C\u8FDB\u884C\u683C\u5F0F\u5316\u3002").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.FormattingWhenLineEnd).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.FormattingWhenLineEnd = value;
        console.log("FormattingWhenLineEnd:", value);
        yield this.plugin.saveSettings();
      }));
    });
    containerEl.createEl("h2", { text: "\u8BE6\u7EC6\u89C4\u5219\u5F00\u5173 (Sub Switches)" });
    new import_obsidian2.Setting(containerEl).setName("Full-Width symbol input enhancement").setDesc("\u5168\u89D2\u7B26\u53F7\u8F93\u5165\u589E\u5F3A").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.FullWidthCharacterEnhance).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.FullWidthCharacterEnhance = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between Chinese and English/number").setDesc("\u5728\u4E2D\u6587\u548C\u82F1\u6587/\u6570\u5B57\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.ChineseEnglishSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.ChineseEnglishSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Delete the Space between Chinese characters").setDesc("\u5728\u4E2D\u6587\u5B57\u7B26\u95F4\u53BB\u9664\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.ChineseNoSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.ChineseNoSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Smartly insert space between text and punctuation").setDesc("\u5728\u6587\u672C\u548C\u6807\u70B9\u95F4\u667A\u80FD\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.PunctuationSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.PunctuationSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Capitalize the first letter of every sentence").setDesc("\u82F1\u6587\u6BCF\u4E2A\u53E5\u9996\u5B57\u6BCD\u5927\u5199").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.Capitalization).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.Capitalization = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between inline code and text").setDesc("\u5728 `\u884C\u5185\u4EE3\u7801` \u548C\u6587\u672C\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.InlineCodeSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.InlineCodeSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between inline formula and text").setDesc("\u5728 $\u884C\u5185\u516C\u5F0F$ \u548C\u6587\u672C\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.InlineFormulaSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.InlineFormulaSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between link and text").setDesc("\u5728 [[wikilink]] mdlink \u548C\u6587\u672C\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.LinkSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.LinkSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Smart Space between link and text").setDesc("\u5728 [[wikilink]] mdlink \u548C\u6587\u672C\u95F4\u667A\u80FD\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.LinkSmartSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.LinkSmartSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    containerEl.createEl("h2", { text: "\u81EA\u5B9A\u4E49\u6B63\u5219 (Custom regular expressions)" });
    new import_obsidian2.Setting(containerEl).setName("User Defined RegExp Switch").setDesc("\u81EA\u5B9A\u4E49\u6B63\u5219\u8868\u8FBE\u5F0F\u5F00\u5173\uFF0C\u5339\u914D\u5230\u7684\u5185\u5BB9\u4E0D\u8FDB\u884C\u683C\u5F0F\u5316").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.UserDefinedRegSwitch).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.UserDefinedRegSwitch = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Space between User Defined Part(selected by RegExp) and text").setDesc("\u5728\u7528\u6237\u81EA\u5B9A\u4E49\u533A\u5757(\u6B63\u5219\u8868\u8FBE\u5F0F\u9009\u62E9)\u548C\u6587\u672C\u4E4B\u95F4\u7A7A\u683C").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.UserPartSpace).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.UserPartSpace = value;
        yield this.plugin.saveSettings();
      }));
    });
    const regContentAreaSetting = new import_obsidian2.Setting(containerEl);
    regContentAreaSetting.settingEl.setAttribute("style", "display: grid; grid-template-columns: 1fr;");
    regContentAreaSetting.setName("User-defined RegExp to ignore, one expression per line").setDesc("\u7528\u6237\u81EA\u5B9A\u4E49\u6B63\u5219\u8868\u8FBE\u5F0F\uFF0C\u5339\u914D\u5230\u7684\u5185\u5BB9\u4E0D\u8FDB\u884C\u683C\u5F0F\u5316\uFF0C\u6BCF\u884C\u4E00\u4E2A\u8868\u8FBE\u5F0F\uFF0C\u884C\u5C3E\u4E0D\u8981\u968F\u610F\u52A0\u7A7A\u683C");
    const regContentArea = new import_obsidian2.TextAreaComponent(regContentAreaSetting.controlEl);
    setAttributes(regContentArea.inputEl, {
      style: "margin-top: 12px; width: 100%;  height: 30vh;"
    });
    regContentArea.setValue(this.plugin.settings.UserDefinedRegExp).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.UserDefinedRegExp = value;
      this.plugin.saveSettings();
    }));
    containerEl.createEl("a", { text: "RegExp: \u6B63\u5219\u8868\u8FBE\u5F0F", href: "https://javascript.ruanyifeng.com/stdlib/regexp.html#" });
    containerEl.createEl("h2", { text: "Debug" });
    new import_obsidian2.Setting(containerEl).setName("Print debug info in console").setDesc("\u5728\u63A7\u5236\u53F0\u8F93\u51FA\u8C03\u8BD5\u4FE1\u606F").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.Debug).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.Debug = value;
        yield this.plugin.saveSettings();
      }));
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjb3JlLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFRleHRBcmVhQ29tcG9uZW50LCBXb3Jrc3BhY2UsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IEVkaXRvclBvc2l0aW9uLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgSW5saW5lVHlwZSwgTGluZVR5cGUsIEFydGljbGVQYXJ0LCBJbmxpbmVQYXJ0LCBJbmxpbmVDaGFuZ2UgfSBmcm9tIFwiLi9jb3JlXCIgXHJcbmltcG9ydCB7IEZvcm1hdFNldHRpbmdzLCBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSAnLi9jb3JlJ1xyXG5pbXBvcnQgeyBzcGxpdEFydGljbGUsIHNwbGl0TGluZSwgZm9ybWF0TGluZSwgZ2V0TGluZVR5cGVGcm9tQXJ0aWNsZVBhcnRzLCBpc1Bvc2l0aW9uQmVmb3JlLCByZXBhcnNlQXJ0aWNsZVBhcnRzfSBmcm9tICcuL2NvcmUnXHJcbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxyXG5cclxuaW50ZXJmYWNlIEVkaXRvclNlbGVjdGlvbkNoYW5nZXtcclxuXHRiZWdpbjogRWRpdG9yUG9zaXRpb24sXHJcblx0ZW5kOiBFZGl0b3JQb3NpdGlvbixcclxuXHR0ZXh0OiBzdHJpbmcsXHJcblx0c2VsZWN0aW9uOiBib29sZWFuLFxyXG5cdHNlbGVjdGlvbkFuY2hvcjogRWRpdG9yUG9zaXRpb24sXHJcblx0c2VsZWN0aW9uSGVhZDogRWRpdG9yUG9zaXRpb25cclxufVxyXG5cclxuaW50ZXJmYWNlIFBhcnNlQXJ0aWNsZXtcclxuXHRjaGVjazogYm9vbGVhbjtcclxuXHRiZWdpbkxpbmVOdW1iZXI6IG51bWJlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50OiBhbnksIGF0dHJpYnV0ZXM6IGFueSkge1xyXG5cdGZvciAobGV0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XHJcblx0ICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFYXN5VHlwaW5nUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogRm9ybWF0U2V0dGluZ3M7XHJcblx0a2V5VXBkYXRlQ3Vyc29yOiBTZXQ8c3RyaW5nPjtcclxuXHRhcnRpY2xlUGFydHM6IEFydGljbGVQYXJ0W107XHJcblx0c2VsZWN0aW9uVGV4dENoYW5nZTogRWRpdG9yU2VsZWN0aW9uQ2hhbmdlfG51bGw7XHJcblx0cHJldkN1cnNvcjogRWRpdG9yUG9zaXRpb247XHJcblx0cmVwYXJzZUFydGljbGU6IFBhcnNlQXJ0aWNsZTtcclxuXHRlZGl0b3JDaGFuZ2VkOiBib29sZWFuO1xyXG5cclxuXHRzZWxlY3RlZFRleHQ6IHN0cmluZztcclxuXHRjaGFyQmVmb3JlQ3Vyc29yOiBzdHJpbmc7XHJcblx0Y2hhckFmdGVyQ3Vyc29yOiBzdHJpbmc7XHJcblx0a2V5RG93bkZsYWc6IGJvb2xlYW47XHJcblxyXG5cdGN0cmxEb3duTGluZUluZGV4OiBudW1iZXI7XHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHRcdHRoaXMucHJldkN1cnNvciA9IHtsaW5lOjAsIGNoOjB9O1xyXG5cdFx0dGhpcy5zZWxlY3Rpb25UZXh0Q2hhbmdlID0gbnVsbDtcclxuXHRcdHRoaXMuZWRpdG9yQ2hhbmdlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5rZXlVcGRhdGVDdXJzb3IgPSBuZXcgU2V0KFsnQXJyb3dVcCcsICdBcnJvd0Rvd24nLCAnQXJyb3dMZWZ0JywgJ0Fycm93UmlnaHQnXSk7XHJcblxyXG5cdFx0dGhpcy5hcnRpY2xlUGFydHMgPSBudWxsO1xyXG5cdFx0dGhpcy5yZXBhcnNlQXJ0aWNsZSA9IHtcclxuXHRcdFx0Y2hlY2s6IHRydWUsXHJcblx0XHRcdGJlZ2luTGluZU51bWJlcjogMFxyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLmtleURvd25GbGFnID0gZmFsc2U7XHJcblx0XHR0aGlzLnNlbGVjdGVkVGV4dCA9IFwiXCI7XHJcblx0XHR0aGlzLmNoYXJCZWZvcmVDdXJzb3IgPSBcIlwiO1xyXG5cdFx0dGhpcy5jaGFyQWZ0ZXJDdXJzb3IgPSBcIlwiO1xyXG5cdFx0dGhpcy5jdHJsRG93bkxpbmVJbmRleCA9IDA7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6IFwiZWFzeS10eXBpbmctZm9ybWF0LXNlbGVjdGlvblwiLFxyXG5cdFx0XHRuYW1lOiBcImZvcm1hdCBzZWxlY3RlZCB0ZXh0XCIsXHJcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB0aGlzLmZvcm1hdFNlbGVjdGlvbigpLFxyXG5cdFx0XHRob3RrZXlzOiBbe1xyXG5cdFx0XHRcdG1vZGlmaWVyczogWydDdHJsJywgJ1NoaWZ0J10sXHJcblx0XHRcdFx0a2V5OiBcInNcIlxyXG5cdFx0XHR9XSxcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiBcImVhc3ktdHlwaW5nLWZvcm1hdC1hcnRpY2xlXCIsXHJcblx0XHRcdG5hbWU6IFwiZm9ybWF0IGN1cnJlbnQgYXJ0aWNsZVwiLFxyXG5cdFx0XHRjYWxsYmFjazogKCkgPT4gdGhpcy5mb3JtYXRBcnRpY2xlKCksXHJcblx0XHRcdGhvdGtleXM6IFt7XHJcblx0XHRcdFx0bW9kaWZpZXJzOiBbJ0N0cmwnLCAnQWx0J10sXHJcblx0XHRcdFx0a2V5OiBcImxcIlxyXG5cdFx0XHR9XSxcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiBcImVhc3ktdHlwaW5nLWZvcm1hdC1zd2l0Y2hcIixcclxuXHRcdFx0bmFtZTogXCJzd2l0Y2ggYXV0b2Zvcm1hdFwiLFxyXG5cdFx0XHRjYWxsYmFjazogKCkgPT4gdGhpcy5zd2l0Y2hBdXRvRm9ybWF0dGluZygpLFxyXG5cdFx0XHRob3RrZXlzOiBbe1xyXG5cdFx0XHRcdG1vZGlmaWVyczogWydDdHJsJ10sXHJcblx0XHRcdFx0a2V5OiBcInRhYlwiXHJcblx0XHRcdH1dLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cclxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgRWFzeVR5cGluZ1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKCdlZGl0b3ItY2hhbmdlJywgdGhpcy5oYW5kbGVDaGFuZ2UpKTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2VkaXRvci1wYXN0ZScsIHRoaXMuaGFuZGxlUGFzdGUpKTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2ZpbGUtb3BlbicsIHRoaXMuaGFuZGxlRmlsZU9wZW4pKTtcclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaykpO1xyXG5cdFx0Ly8gdGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLndvcmtzcGFjZS5vbignYWN0aXZlLWxlYWYtY2hhbmdlJywgKGxlYWY6IFdvcmtzcGFjZUxlYWYpPT57XHJcblx0XHQvLyBcdGNvbnNvbGUubG9nKFwiPT09PmxlYWYgY2hhbmdlIVwiKTtcclxuXHRcdC8vIFx0Y29uc29sZS5sb2cobGVhZi5nZXREaXNwbGF5VGV4dCgpKTtcclxuXHRcdC8vIFx0Y29uc29sZS5sb2cobGVhZi52aWV3LmdldFZpZXdUeXBlKCkpO1xyXG5cdFx0Ly8gfSkpO1xyXG5cclxuXHRcdC8vIElmIHRoZSBwbHVnaW4gaG9va3MgdXAgYW55IGdsb2JhbCBET00gZXZlbnRzIChvbiBwYXJ0cyBvZiB0aGUgYXBwIHRoYXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBwbHVnaW4pXHJcblx0XHQvLyBVc2luZyB0aGlzIGZ1bmN0aW9uIHdpbGwgYXV0b21hdGljYWxseSByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyIHdoZW4gdGhpcyBwbHVnaW4gaXMgZGlzYWJsZWQuXHJcblx0XHR0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdrZXl1cCcsIHRoaXMuaGFuZGxlS2V5dXApO1xyXG5cdFx0dGhpcy5yZWdpc3RlckRvbUV2ZW50KGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5ZG93bilcclxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2JlZm9yZWlucHV0JywgdGhpcy5oYW5kbGVCZWZvcmVJbnB1dCk7XHJcblx0XHQvLyB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdzZWxlY3QnLCAoZXY6IEV2ZW50KT0+e2NvbnNvbGUubG9nKCdzZWxlY3QnKTsgdGhpcy5oYW5kbGVTZWxlY3QoZXYpO30pO1xyXG5cdFx0dGhpcy5yZWdpc3RlckRvbUV2ZW50KGRvY3VtZW50LCAnc2VsZWN0aW9uY2hhbmdlJywgdGhpcy5oYW5kbGVTZWxlY3RCZWdpbik7XHJcblx0XHQvLyB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdjaGFuZ2UnLCAoZXY6IEV2ZW50KT0+e2NvbnNvbGUubG9nKCdDaGFuZ2U6JywgZXYpfSk7XHJcblxyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblxyXG5cdH1cclxuXHJcblx0Z2V0RWRpdG9yPSgpOkVkaXRvcnxudWxsPT5cclxuXHR7XHJcblx0XHRsZXQgZWRpdG9yID0gbnVsbDtcclxuXHRcdGxldCBtYXJrZG93blZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cdFx0aWYobWFya2Rvd25WaWV3KVxyXG5cdFx0e1xyXG5cdFx0XHRlZGl0b3IgPSBtYXJrZG93blZpZXcuZWRpdG9yO1xyXG5cdFx0fVxyXG5cdFx0aWYoZWRpdG9yID09PSBudWxsICYmIHRoaXMuc2V0dGluZ3MuRGVidWcpIGNvbnNvbGUubG9nKCdjYW5cXCd0IGdldCBlZGl0b3InKTtcclxuXHRcdHJldHVybiBlZGl0b3I7XHJcblx0fVxyXG5cclxuXHRmb3JtYXRBcnRpY2xlID0gKCk6dm9pZD0+XHJcblx0e1xyXG5cdFx0aWYodGhpcy5zZXR0aW5ncy5EZWJ1ZylcclxuXHRcdHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJCZWdpbiBmb3JtYXQgQXJ0aWNsZVwiKTtcclxuXHRcdH1cclxuXHRcdGxldCBlZGl0b3IgPSB0aGlzLmdldEVkaXRvcigpO1xyXG5cdFx0aWYoIWVkaXRvcikgcmV0dXJuO1xyXG5cdFx0dGhpcy51cGRhdGVBcnRpY2xlUGFydHMoZWRpdG9yKTtcclxuXHRcdGxldCBsaW5lQ291bnQgPSBlZGl0b3IubGluZUNvdW50KCk7XHJcblx0XHRmb3IgKGxldCBpPTA7IGk8bGluZUNvdW50OyBpKyspXHJcblx0XHR7XHJcblx0XHRcdGlmKHRoaXMuaXNUZXh0UGFydChpKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRoaXMuRm9ybWF0TGluZVdpdGhvdXRDaGVja1BhcnQoZWRpdG9yLCBpKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYodGhpcy5zZXR0aW5ncy5EZWJ1ZylcclxuXHRcdHtcclxuXHRcdFx0bmV3IE5vdGljZShcIkZvcm1hdCBBcnRpY2xlIERvbmUhXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Zm9ybWF0U2VsZWN0aW9uID0gKCk6dm9pZD0+XHJcblx0e1xyXG5cdFx0aWYodGhpcy5zZXR0aW5ncy5EZWJ1ZylcclxuXHRcdHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJCZWdpbiBmb3JtYXQgU2VsZWN0aW9uXCIpO1xyXG5cdFx0fVxyXG5cdFx0bGV0IGVkaXRvciA9IHRoaXMuZ2V0RWRpdG9yKCk7XHJcblx0XHRpZighZWRpdG9yKSByZXR1cm47XHJcblx0XHR0aGlzLnVwZGF0ZUFydGljbGVQYXJ0cyhlZGl0b3IpO1xyXG5cclxuXHRcdGlmKCFlZGl0b3Iuc29tZXRoaW5nU2VsZWN0ZWQoKSB8fCBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk9PT0nJylcclxuXHRcdHtcclxuXHRcdFx0bGV0IGxpbmVOdW1iZXIgPSBlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZTtcclxuXHRcdFx0aWYodGhpcy5pc1RleHRQYXJ0KGxpbmVOdW1iZXIpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGhpcy5Gb3JtYXRMaW5lV2l0aG91dENoZWNrUGFydChlZGl0b3IsIGxpbmVOdW1iZXIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVkaXRvci5zZXRDdXJzb3Ioe2xpbmU6IGxpbmVOdW1iZXIsIGNoOmVkaXRvci5nZXRMaW5lKGxpbmVOdW1iZXIpLmxlbmd0aH0pO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHNlbGVjdGlvbiA9IGVkaXRvci5saXN0U2VsZWN0aW9ucygpWzBdO1xyXG5cdFx0bGV0IGxpbmVCZWdpblJlcGFyc2UgPSBzZWxlY3Rpb24uYW5jaG9yLmxpbmU7XHJcblx0XHRpZihsaW5lQmVnaW5SZXBhcnNlPnNlbGVjdGlvbi5oZWFkLmxpbmUpXHJcblx0XHR7XHJcblx0XHRcdGxpbmVCZWdpblJlcGFyc2UgPSBzZWxlY3Rpb24uaGVhZC5saW5lO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5yZXBhcnNlQXJ0aWNsZSA9IHtjaGVjazogdHJ1ZSwgYmVnaW5MaW5lTnVtYmVyOmxpbmVCZWdpblJlcGFyc2V9O1xyXG5cclxuXHRcdGxldCBzZWxlY3RlZEFydGljbGUgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XHJcblx0XHRsZXQgYXJ0aWNsZVBhcnRzID0gc3BsaXRBcnRpY2xlKHNlbGVjdGVkQXJ0aWNsZSk7XHJcblx0XHRsZXQgbGluZXMgPSBzZWxlY3RlZEFydGljbGUuc3BsaXQoJ1xcbicpO1xyXG5cdFx0bGV0IHJlc3VsdCA9IFwiXCI7XHJcblx0XHRmb3IobGV0IGk9MDsgaTxhcnRpY2xlUGFydHMubGVuZ3RoOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdGlmKGFydGljbGVQYXJ0c1tpXS50eXBlIT1MaW5lVHlwZS50ZXh0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGo9YXJ0aWNsZVBhcnRzW2ldLmJlZ2luOyBqPGFydGljbGVQYXJ0c1tpXS5lbmQ7aisrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsaW5lID0gbGluZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGxpbmUgKyAnXFxuJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvLyBcdTVCRjlcdTZCQ0ZcdTg4NENcdThGREJcdTg4NENcdTY4M0NcdTVGMEZcdTUzMTZcclxuXHRcdFx0XHRmb3IobGV0IGo9YXJ0aWNsZVBhcnRzW2ldLmJlZ2luOyBqPGFydGljbGVQYXJ0c1tpXS5lbmQ7aisrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsaW5lID0gbGluZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld2xpbmUgPSBmb3JtYXRMaW5lKGxpbmUsIHtsaW5lOjAsIGNoOmxpbmUubGVuZ3RofSwgdGhpcy5zZXR0aW5ncylbMF07XHJcblx0XHRcdFx0XHRyZXN1bHQgKz0gbmV3bGluZSArICdcXG4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXN1bHQgPSByZXN1bHQuc3Vic3RyaW5nKDAsIHJlc3VsdC5sZW5ndGgtMSk7XHJcblx0XHRlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihyZXN1bHQpO1xyXG5cdFx0dGhpcy51cGRhdGVBcnRpY2xlUGFydHMoZWRpdG9yKTtcclxuXHRcdGlmKHRoaXMuc2V0dGluZ3MuRGVidWcpXHJcblx0XHR7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJGb3JtYXQgU2VsZWN0aW9uIERvbmUhXCIpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIkVuZCBmb3JtYXQgU2VsZWN0aW9uXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3dpdGNoQXV0b0Zvcm1hdHRpbmcoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MuQXV0b0Zvcm1hdHRpbmcgPSB0aGlzLnNldHRpbmdzLkF1dG9Gb3JtYXR0aW5nPyBmYWxzZTp0cnVlO1xyXG4gICAgICAgIGxldCBzdGF0dXMgPSB0aGlzLnNldHRpbmdzLkF1dG9Gb3JtYXR0aW5nPydvbic6J29mZic7XHJcbiAgICAgICAgbmV3IE5vdGljZSgnQXV0b2Zvcm1hdCBpcyAnKyBzdGF0dXMgKychJyk7XHJcbiAgICB9XHJcblxyXG5cclxuXHRoYW5kbGVCZWZvcmVJbnB1dD0oZXY6IElucHV0RXZlbnQpOnZvaWQ9PlxyXG5cdHtcclxuXHRcdGlmKHRoaXMuc2V0dGluZ3MuRGVidWcpIGNvbnNvbGUubG9nKFwiPT09PiBCZWZvcmUgSW5wdXRcIik7XHJcblx0XHRpZighdGhpcy5zZXR0aW5ncy5GdWxsV2lkdGhDaGFyYWN0ZXJFbmhhbmNlKSByZXR1cm47XHJcblx0XHRsZXQgZWRpdG9yID0gdGhpcy5nZXRFZGl0b3IoKTtcclxuXHRcdGlmKCFlZGl0b3IpIHJldHVybjtcclxuXHJcblx0XHQvLyBvYnNpZGlhbiBcdTU3MjggbGl2ZSBwcmV2aWV3IFx1NkEyMVx1NUYwRlx1NEUwQlx1NEYxQVx1NjcwOVx1OTUxOVx1OEJFRlx1OTAwOVx1NEUyRFx1NTMzQVx1NTdERlx1NzY4NCBCdWdcclxuXHRcdGxldCBzcGVjaWFsQ2hhciA9IG5ldyBTZXQoWydcdTMwMTAnLCAnXHUzMDExJywnXHUwMEI3JywgJz0nLCAnXHUyMDFDJywgJ1x1MjAxRCcsICdcdTMwMEEnLCAnXHUzMDBCJywgJ1x1MjAxOCcsICdcdTIwMTknLCAnXHVGRjA4JywgJ1x1RkYwOScsICdcdUZGRTUnXSk7XHJcblxyXG5cdFx0aWYoZWRpdG9yLnNvbWV0aGluZ1NlbGVjdGVkKCkgJiYgZWRpdG9yLmdldFNlbGVjdGlvbigpIT1cIlwiKXtcclxuXHRcdFx0Ly8gY29uc29sZS5sb2coJ0JlZm9yZSBDaGFuZ2UgU2VsZWN0aW9uOicsIGVkaXRvci5nZXRTZWxlY3Rpb24oKSwgXCJcdTY2RkZcdTYzNjJcdTUxODVcdTVCQjlcIixldi5kYXRhKTtcclxuXHRcdFx0aWYoZXYuZGF0YS5sZW5ndGghPTEgfHwgc3BlY2lhbENoYXIuaGFzKGVkaXRvci5nZXRTZWxlY3Rpb24oKSkpIHJldHVybjtcclxuXHJcblx0XHRcdGxldCBzZWxlY3RlZEZvcm1hdFJhbmdlID0gZWRpdG9yLmxpc3RTZWxlY3Rpb25zKClbMF07XHJcblx0XHRcdGxldCBiZWdpbjogRWRpdG9yUG9zaXRpb247XHJcblx0XHRcdGxldCBlbmQ6IEVkaXRvclBvc2l0aW9uO1xyXG5cdFx0XHRsZXQgYW5jaG9yOiBFZGl0b3JQb3NpdGlvbjtcclxuXHRcdFx0bGV0IGhlYWQ6IEVkaXRvclBvc2l0aW9uO1xyXG5cdFx0XHRpZihpc1Bvc2l0aW9uQmVmb3JlKHNlbGVjdGVkRm9ybWF0UmFuZ2UuYW5jaG9yLCBzZWxlY3RlZEZvcm1hdFJhbmdlLmhlYWQpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YmVnaW4gPSBzZWxlY3RlZEZvcm1hdFJhbmdlLmFuY2hvcjtcclxuXHRcdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNle1xyXG5cdFx0XHRcdGJlZ2luID0gc2VsZWN0ZWRGb3JtYXRSYW5nZS5oZWFkO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVuZCA9IHtsaW5lOiBiZWdpbi5saW5lLCBjaDogYmVnaW4uY2grMX07XHJcblx0XHRcdGFuY2hvciA9IHtsaW5lOiBzZWxlY3RlZEZvcm1hdFJhbmdlLmFuY2hvci5saW5lLCBjaDogc2VsZWN0ZWRGb3JtYXRSYW5nZS5hbmNob3IuY2grMX07XHJcblx0XHRcdGhlYWQgPSB7bGluZTogc2VsZWN0ZWRGb3JtYXRSYW5nZS5oZWFkLmxpbmUsIGNoOiBzZWxlY3RlZEZvcm1hdFJhbmdlLmhlYWQuY2grMX07XHJcblxyXG5cdFx0XHRsZXQgdGV4dDogc3RyaW5nO1xyXG5cdFx0XHRzd2l0Y2goZXYuZGF0YSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNhc2UgJ1x1MzAxMCc6XHJcblx0XHRcdFx0Y2FzZSAnXHUzMDExJzpcclxuXHRcdFx0XHRcdHRleHQgPSBcIltcIitlZGl0b3IuZ2V0U2VsZWN0aW9uKCkrXCJdXCI7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdcdTAwQjcnOlxyXG5cdFx0XHRcdFx0dGV4dCA9IFwiYFwiK2VkaXRvci5nZXRTZWxlY3Rpb24oKStcImBcIjtcclxuXHRcdFx0XHRcdHRoaXMucmVwYXJzZUFydGljbGUuY2hlY2sgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dGhpcy5yZXBhcnNlQXJ0aWNsZS5iZWdpbkxpbmVOdW1iZXIgPSBiZWdpbi5saW5lXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdcdUZGRTUnOlxyXG5cdFx0XHRcdGNhc2UgJ1x1MDBBNSc6XHJcblx0XHRcdFx0XHR0ZXh0ID0gXCIkXCIrZWRpdG9yLmdldFNlbGVjdGlvbigpK1wiJFwiO1xyXG5cdFx0XHRcdFx0dGhpcy5yZXBhcnNlQXJ0aWNsZS5jaGVjayA9IHRydWU7XHJcblx0XHRcdFx0XHR0aGlzLnJlcGFyc2VBcnRpY2xlLmJlZ2luTGluZU51bWJlciA9IGJlZ2luLmxpbmVcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ1x1MjAxQyc6XHJcblx0XHRcdFx0Y2FzZSAnXHUyMDFEJzpcclxuXHRcdFx0XHRcdHRleHQgPSBcIlx1MjAxQ1wiK2VkaXRvci5nZXRTZWxlY3Rpb24oKStcIlx1MjAxRFwiO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnXHUyMDE4JzpcclxuXHRcdFx0XHRjYXNlICdcdTIwMTknOlxyXG5cdFx0XHRcdFx0dGV4dCA9ICdcdTIwMTgnK2VkaXRvci5nZXRTZWxlY3Rpb24oKSsnXHUyMDE5JztcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ1x1MzAwQSc6XHJcblx0XHRcdFx0Y2FzZSAnXHUzMDBCJzpcclxuXHRcdFx0XHRcdHRleHQgPSAnXHUzMDBBJytlZGl0b3IuZ2V0U2VsZWN0aW9uKCkrJ1x1MzAwQic7XHJcblx0XHRcdFx0XHRicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1x1RkYwOCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdcdUZGMDknOlxyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJJIGFtIGhlcmVcIilcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gJ1x1RkYwOCcrZWRpdG9yLmdldFNlbGVjdGlvbigpKydcdUZGMDknO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd7JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ30nOlxyXG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSAneycrZWRpdG9yLmdldFNlbGVjdGlvbigpKyd9JztcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHR0aGlzLnByZXZDdXJzb3IgPSBiZWdpbjtcclxuXHRcdFx0XHRcdGxldCByZWdSZXBhcnNlID0gL15bXFwtXFwkXFxgXXxbXFwtXFwkXFxgXVxccyokfFxcbi9tO1xyXG5cdFx0XHRcdFx0bGV0IHJlZyA9IC9bLVxcYFxcJF0vO1xyXG5cdFx0XHRcdFx0aWYocmVnUmVwYXJzZS50ZXN0KGVkaXRvci5nZXRTZWxlY3Rpb24oKSkgfHwgcmVnLnRlc3QoZXYuZGF0YSkpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHRoaXMucmVwYXJzZUFydGljbGUuY2hlY2sgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHR0aGlzLnJlcGFyc2VBcnRpY2xlLmJlZ2luTGluZU51bWJlciA9IGJlZ2luLmxpbmVcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMuc2VsZWN0aW9uVGV4dENoYW5nZSA9IG51bGw7XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLnNlbGVjdGlvblRleHRDaGFuZ2UgPSB7XHJcblx0XHRcdFx0YmVnaW46IGJlZ2luLFxyXG5cdFx0XHRcdGVuZDogZW5kLFxyXG5cdFx0XHRcdHRleHQ6IHRleHQsXHJcblx0XHRcdFx0c2VsZWN0aW9uOiB0cnVlLFxyXG5cdFx0XHRcdHNlbGVjdGlvbkFuY2hvcjphbmNob3IsXHJcblx0XHRcdFx0c2VsZWN0aW9uSGVhZDogaGVhZFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRoYW5kbGVLZXlkb3duPShldnQ6IEtleWJvYXJkRXZlbnQpOnZvaWQ9PlxyXG5cdHtcclxuXHRcdC8vIGNvbnNvbGUubG9nKCdrZXkgZG93bicsIGV2dC5rZXksIGV2dC5jdHJsS2V5LCBldnQuc2hpZnRLZXkpO1xyXG5cdFx0aWYodGhpcy5zZXR0aW5ncy5EZWJ1ZylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT09PT09PT09PT09PT09PT09PT09PT09JylcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2tleWRvd246JywgZXZ0LmtleSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHRcdGxldCBlZGl0b3IgPSB0aGlzLmdldEVkaXRvcigpO1xyXG5cdFx0aWYoIWVkaXRvcikgcmV0dXJuO1xyXG5cdFx0dGhpcy5rZXlEb3duRmxhZyA9IHRydWU7XHJcblx0XHRpZihldnQua2V5ID09PSAnQ29udHJvbCcpIHRoaXMuY3RybERvd25MaW5lSW5kZXggPSBlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZTtcclxuXHRcdC8vIGNvbnNvbGUubG9nKCd0ZXh0IGFmdGVyIGtleSBkb3duOicsIGVkaXRvci5nZXRMaW5lKGVkaXRvci5nZXRDdXJzb3IoKS5saW5lKSk7XHJcblx0fVxyXG5cdFxyXG5cdGhhbmRsZUtleXVwPShldnQ6IEtleWJvYXJkRXZlbnQpOnZvaWQ9PlxyXG5cdHtcclxuXHRcdGlmKHRoaXMuc2V0dGluZ3MuRGVidWcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnPT09PT09PT09PT09PT09PT09PT09PT09PScpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdrZXl1cDonLCBldnQua2V5KTtcclxuICAgICAgICB9XHJcblxyXG5cdFx0bGV0IGVkaXRvciA9IHRoaXMuZ2V0RWRpdG9yKCk7XHJcblx0XHRpZighZWRpdG9yKSByZXR1cm47XHJcblx0XHR0aGlzLmtleURvd25GbGFnID0gZmFsc2U7XHJcblxyXG5cdFx0Ly8gXHU1OTA0XHU3NDA2XHU0RTBEXHU2NkY0XHU2NUIwIGVkaXRvckNoYW5nZWQgXHU3Njg0XHU2MzA5XHU5NTJFXHJcblx0XHRpZihldnQua2V5ID09PSAnUHJvY2VzcycgfHwgZXZ0LmtleSA9PT0gJ1NoaWZ0JylcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFx1NjZGNFx1NjVCMFx1OTAwOVx1NEUyRFx1NzY4NFx1NjU4N1x1NjcyQ1x1RkYwQ1x1NzUyOFx1NEU4RVx1NTQwRVx1N0VFRFx1NTIyMFx1OTY2NFx1OTUyRVx1ODlFNlx1NTNEMVx1NjVGNlx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1OTcwMFx1ODk4MVx1OTFDRFx1NjVCMFx1ODlFM1x1Njc5MFx1NjU4N1x1NjcyQ1xyXG5cdFx0aWYoZXZ0LmtleSE9J0JhY2tzcGFjZScgJiYgZXZ0LmtleSE9J0VudGVyJyAmJiBldnQua2V5IT0nRGVsZXRlJylcclxuXHRcdHtcclxuXHRcdFx0dGhpcy51cGRhdGVTZWxlY3Rpb24oZWRpdG9yKTtcclxuXHRcdH1cclxuXHRcdC8vIGlmKHRoaXMua2V5VXBkYXRlQ3Vyc29yLmhhcyhldnQua2V5KSlcdFx0XHJcblxyXG5cdFx0Ly8gXHU1OTA0XHU3NDA2XHU5MDA5XHU0RTJEXHU2NTg3XHU2NzJDXHU3Njg0XHU2MEM1XHU1MUI1XHU0RTBCXHU2MzA5XHU5NTJFXHU0RjdGXHU3NTI4XHU3Mjc5XHU1QjlBXHU3Njg0XHU1MTY4XHU4OUQyXHU3QjI2XHU1M0Y3XHJcblx0XHRpZih0aGlzLnNlbGVjdGlvblRleHRDaGFuZ2UgJiYgdGhpcy5zZXR0aW5ncy5BdXRvRm9ybWF0dGluZylcclxuXHRcdHtcclxuXHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZSh0aGlzLnNlbGVjdGlvblRleHRDaGFuZ2UudGV4dCwgdGhpcy5zZWxlY3Rpb25UZXh0Q2hhbmdlLmJlZ2luLCB0aGlzLnNlbGVjdGlvblRleHRDaGFuZ2UuZW5kKTtcclxuXHRcdFx0ZWRpdG9yLnNldFNlbGVjdGlvbih0aGlzLnNlbGVjdGlvblRleHRDaGFuZ2Uuc2VsZWN0aW9uQW5jaG9yLCB0aGlzLnNlbGVjdGlvblRleHRDaGFuZ2Uuc2VsZWN0aW9uSGVhZCk7XHJcblx0XHRcdHRoaXMucHJldkN1cnNvciA9IHRoaXMuc2VsZWN0aW9uVGV4dENoYW5nZS5zZWxlY3Rpb25IZWFkO1xyXG5cdFx0XHR0aGlzLnNlbGVjdGlvblRleHRDaGFuZ2UgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmVkaXRvckNoYW5nZWQgPSBmYWxzZTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5zZWxlY3Rpb25UZXh0Q2hhbmdlID0gbnVsbDtcclxuXHRcdFxyXG5cdFx0Ly8gXHU1NzI4XHU0RUU1XHU0RTBCXHU2MEM1XHU1MUI1XHU0RTBCXHU2M0QyXHU0RUY2XHU0RTBEXHU1NENEXHU1RTk0XHJcblx0XHRpZighdGhpcy5lZGl0b3JDaGFuZ2VkIHx8IHRoaXMuc2V0dGluZ3MuQXV0b0Zvcm1hdHRpbmc9PT1mYWxzZSlcclxuXHRcdHtcclxuICAgICAgICAgICAgdGhpcy5wcmV2Q3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG5cdFx0XHR0aGlzLmVkaXRvckNoYW5nZWQgPSBmYWxzZTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFx1NTkwNFx1NzQwNlx1NjRBNFx1NTZERVx1MzAwMVx1NTNDRFx1NjRBNFx1NTZERVx1NTQ4Q1x1NTI2QVx1NTIwN1x1RkYwQ1x1OTcwMFx1ODk4MVx1OTFDRFx1NjVCMFx1ODlFM1x1Njc5MFx1NjU4N1x1Njg2M1xyXG5cdFx0aWYoZXZ0LmN0cmxLZXkgJiYgKGV2dC5rZXk9PT0neicgfHwgZXZ0LmtleT09PSd5JyB8fCBldnQua2V5PT09J3gnKSlcclxuXHRcdHtcclxuXHRcdFx0bGV0IGxpbmVSZXBhcnNlQmVnaW4gPSBlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZTtcclxuXHRcdFx0aWYobGluZVJlcGFyc2VCZWdpbj50aGlzLmN0cmxEb3duTGluZUluZGV4KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bGluZVJlcGFyc2VCZWdpbiA9IHRoaXMuY3RybERvd25MaW5lSW5kZXg7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5yZXBhcnNlQXJ0aWNsZSA9IHtjaGVjazogdHJ1ZSwgYmVnaW5MaW5lTnVtYmVyOiBsaW5lUmVwYXJzZUJlZ2lufTtcclxuXHRcdFx0dGhpcy51cGRhdGVBcnRpY2xlUGFydHMoZWRpdG9yKTtcclxuXHRcdFx0dGhpcy5wcmV2Q3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG5cdFx0XHR0aGlzLmVkaXRvckNoYW5nZWQgPSBmYWxzZTtcclxuXHRcdFx0Ly8gY29uc29sZS5sb2coJ3JlcGFyc2UgYmVnaW46JywgbGluZVJlcGFyc2VCZWdpbik7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBcdTUyMjBcdTk2NjRcdTY1ODdcdTY3MkNcdTU0MEVcdTk3MDBcdTg5ODFcdTkxQ0RcdTY1QjBcdTg5RTNcdTY3OTBcdTY1ODdcdTY3MkNcclxuXHRcdGxldCByZWdUZXN0UmVwYXJzZSA9IC9eW1xcLVxcJGBdfFtcXC1cXCRcXGBdXFxzKiR8XFxufFxcJFxcJHwtLS18YGBgL2dtO1xyXG5cdFx0Ly8gbGV0IHNldFRlc3RSZXBhcnNlID0gbmV3IFNldChbJ1xcbicsICctJywgJyQnLCAnYCddKTtcclxuXHRcdGxldCBjcyA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuXHRcdGxldCBjaGFyQWZ0ZXJDdXJzb3IgPSBlZGl0b3IuZ2V0UmFuZ2UoXHJcblx0XHRcdHtsaW5lOiBjcy5saW5lLCBjaDpjcy5jaH0sXHJcblx0XHRcdHtsaW5lOiBjcy5saW5lLCBjaDpjcy5jaCsxfVxyXG5cdFx0KTtcclxuXHRcdHN3aXRjaChldnQua2V5KVxyXG5cdFx0e1xyXG5cdFx0XHRjYXNlICdCYWNrc3BhY2UnOlxyXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKCdzZWxlY3RlZCcsIHRoaXMuc2VsZWN0ZWRUZXh0KVxyXG5cdFx0XHRcdC8vIGlmKHRoaXMuc2V0dGluZ3MuRnVsbFdpZHRoQ2hhcmFjdGVyRW5oYW5jZSlcclxuXHRcdFx0XHQvLyB7XHJcblx0XHRcdFx0Ly8gXHRpZih0aGlzLnNlbGVjdGVkVGV4dD09PSdcdTMwMEEnICYmIGNoYXJBZnRlckN1cnNvcj09PSdcdTMwMEInKVxyXG5cdFx0XHRcdC8vIFx0e1xyXG5cdFx0XHRcdC8vIFx0XHRlZGl0b3IucmVwbGFjZVJhbmdlKCcnLCBcclxuXHRcdFx0XHQvLyBcdFx0XHR7bGluZTogY3MubGluZSwgY2g6Y3MuY2h9LFxyXG5cdFx0XHRcdC8vIFx0XHRcdHtsaW5lOiBjcy5saW5lLCBjaDpjcy5jaCsxfSk7XHJcblx0XHRcdFx0Ly8gXHR9XHJcblx0XHRcdFx0Ly8gfVxyXG5cdFx0XHRcdGlmKCh0aGlzLnNlbGVjdGVkVGV4dCE9XCJcIiAmJiAhcmVnVGVzdFJlcGFyc2UudGVzdCh0aGlzLnNlbGVjdGVkVGV4dCkpIHx8IFxyXG5cdFx0XHRcdCAgICAodGhpcy5zZWxlY3RlZFRleHQ9PT1cIlwiICYmICFyZWdUZXN0UmVwYXJzZS50ZXN0KHRoaXMuY2hhckJlZm9yZUN1cnNvcikpKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHRoaXMucmVwYXJzZUFydGljbGUuY2hlY2sgPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRcdHRoaXMucmVwYXJzZUFydGljbGUgPSB7Y2hlY2s6IHRydWUsIGJlZ2luTGluZU51bWJlcjplZGl0b3IuZ2V0Q3Vyc29yKCkubGluZX07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXMudXBkYXRlU2VsZWN0aW9uKGVkaXRvcik7XHJcblx0XHRcdFx0dGhpcy5wcmV2Q3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG5cdFx0XHRcdHRoaXMuZWRpdG9yQ2hhbmdlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdHRoaXMudXBkYXRlQXJ0aWNsZVBhcnRzKGVkaXRvcik7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRjYXNlICdEZWxldGUnOlxyXG5cdFx0XHRcdGlmKCh0aGlzLnNlbGVjdGVkVGV4dCE9XCJcIiAmJiAhcmVnVGVzdFJlcGFyc2UudGVzdCh0aGlzLnNlbGVjdGVkVGV4dCkpIHx8IFxyXG5cdFx0XHRcdCAgICAodGhpcy5zZWxlY3RlZFRleHQ9PT1cIlwiICYmICFyZWdUZXN0UmVwYXJzZS50ZXN0KHRoaXMuY2hhckFmdGVyQ3Vyc29yKSkpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dGhpcy5yZXBhcnNlQXJ0aWNsZS5jaGVjayA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0dGhpcy5yZXBhcnNlQXJ0aWNsZSA9IHtjaGVjazogdHJ1ZSwgYmVnaW5MaW5lTnVtYmVyOmVkaXRvci5nZXRDdXJzb3IoKS5saW5lfTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGhpcy51cGRhdGVTZWxlY3Rpb24oZWRpdG9yKTtcclxuXHRcdFx0XHR0aGlzLnByZXZDdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcblx0XHRcdFx0dGhpcy5lZGl0b3JDaGFuZ2VkID0gZmFsc2U7XHJcblx0XHRcdFx0dGhpcy51cGRhdGVBcnRpY2xlUGFydHMoZWRpdG9yKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdGNhc2UgJ0VudGVyJzpcclxuXHRcdFx0XHRsZXQgcHJldkxpbmVJbmRleCA9IGVkaXRvci5nZXRDdXJzb3IoKS5saW5lLTE7XHJcblx0XHRcdFx0cHJldkxpbmVJbmRleCA9IHByZXZMaW5lSW5kZXg+MD9wcmV2TGluZUluZGV4OjA7XHJcblx0XHRcdFx0aWYoIWV2dC5jdHJsS2V5KSB0aGlzLnJlcGFyc2VBcnRpY2xlID0ge2NoZWNrOiB0cnVlLCBiZWdpbkxpbmVOdW1iZXI6ZWRpdG9yLmdldEN1cnNvcigpLmxpbmUtMX07XHJcblx0XHRcdFx0Ly8vaWYgZ2V0IG5ldyBsaW5lLCBmb3JtYXQgUHJldiBsaW5lXHJcblx0XHRcdFx0dGhpcy51cGRhdGVBcnRpY2xlUGFydHMoZWRpdG9yKTtcclxuXHRcdFx0XHRpZih0aGlzLmlzVGV4dFBhcnQocHJldkxpbmVJbmRleCkpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0aWYodGhpcy5zZXR0aW5ncy5Gb3JtYXR0aW5nV2hlbkxpbmVFbmQpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHRoaXMuRm9ybWF0TGluZVdpdGhvdXRDaGVja1BhcnQoZWRpdG9yLCBwcmV2TGluZUluZGV4KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0bGV0IHByZXZMaW5lRW5kQ3Vyc29yID0ge2xpbmU6IHByZXZMaW5lSW5kZXgsIGNoOiBlZGl0b3IuZ2V0TGluZShwcmV2TGluZUluZGV4KS5sZW5ndGh9XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0dGhpcy51cGRhdGVMaW5lKGVkaXRvciwgcHJldkxpbmVJbmRleCwgcHJldkxpbmVFbmRDdXJzb3IsIHRoaXMuc2V0dGluZ3MsIHByZXZMaW5lRW5kQ3Vyc29yLCBlZGl0b3IuZ2V0Q3Vyc29yKCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0aGlzLnVwZGF0ZVNlbGVjdGlvbihlZGl0b3IpO1xyXG5cdFx0XHRcdHRoaXMucHJldkN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuXHRcdFx0XHR0aGlzLmVkaXRvckNoYW5nZWQgPSBmYWxzZTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGxldCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcblx0XHQvLyBcdTVGNTNcdTUxNDlcdTY4MDdcdTUyNERcdTUxRTBcdTRFMkFcdTVCNTdcdTdCMjZcdTRFM0EgXCIkJFwiIC8gXCJgYGBcIiAvIFwiLS0tXCIgXHU2NUY2XHVGRjBDXHU0RUNFXHU1RjUzXHU1MjREXHU4ODRDXHU5MUNEXHU2NUIwXHU4OUUzXHU2NzkwXHU1MTY4XHU2NTg3XHJcblx0XHR7XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgdHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9IGVkaXRvci5nZXRSYW5nZShcclxuICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTJ9LFxyXG4gICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9XHJcbiAgICAgICAgICAgICk7XHJcblx0XHRcdGxldCB0aHJlZUNoYXJhY3RlcnNCZWZvcmVDdXJzb3IgPSBlZGl0b3IuZ2V0UmFuZ2UoXHJcbiAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0zfSxcclxuICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNofVxyXG4gICAgICAgICAgICApO1xyXG5cclxuXHRcdFx0aWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gXCIkJFwiIHx8IHRocmVlQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gXCJgYGBcIiB8fCB0aHJlZUNoYXJhY3RlcnNCZWZvcmVDdXJzb3IgPT0gXCItLS1cIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRoaXMucmVwYXJzZUFydGljbGUgPSB7Y2hlY2s6IHRydWUsIGJlZ2luTGluZU51bWJlcjogY3Vyc29yLmxpbmV9O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gXHU0RTJEXHU2NTg3XHU1MTY4XHU4OUQyXHU3QjI2XHU1M0Y3XHU4RkRFXHU3RUVEXHU4RjkzXHU1MTY1XHU1ODlFXHU1RjNBXHU1MjlGXHU4MEZEXHJcblx0XHRpZih0aGlzLnNldHRpbmdzLkZ1bGxXaWR0aENoYXJhY3RlckVuaGFuY2UgJiYgIWVkaXRvci5zb21ldGhpbmdTZWxlY3RlZCgpKVxyXG4gICAgICAgIHtcclxuXHRcdFx0XHJcbiAgICAgICAgICAgIGxldCB0d29DaGFyYWN0ZXJzQmVmb3JlQ3Vyc29yID0gZWRpdG9yLmdldFJhbmdlKFxyXG5cdFx0XHRcdHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTJ9LFxyXG5cdFx0XHRcdHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNofVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRsZXQgY2hhckJlZm9yZUN1cnNvciA9IGVkaXRvci5nZXRSYW5nZShcclxuXHRcdFx0XHR7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSxcclxuXHRcdFx0XHR7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH1cclxuXHRcdFx0KTtcclxuICAgICAgICAgICAgbGV0IHR3b0NoYXJhY3RlcnNOZWFyQ3Vyc29yID0gZWRpdG9yLmdldFJhbmdlKFxyXG4gICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMX0sXHJcbiAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaCsxfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBsZXQgY2hhcmFjdGVyMmN1cnNvcjEgPSBlZGl0b3IuZ2V0UmFuZ2UoXHJcbiAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0yfSxcclxuICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoKzF9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGxldCB0d29DaGFyYWN0ZXJzQWZ0ZXJDdXJzb3IgPSBlZGl0b3IuZ2V0UmFuZ2UoXHJcbiAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH0sXHJcbiAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaCsyfVxyXG4gICAgICAgICAgICApO1xyXG5cdFx0XHRcclxuICAgICAgICAgICAgc3dpdGNoKGV2dC5rZXkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJyQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnXHVGRkU1JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1x1MDBBNSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1x1RkZFNVx1RkZFNScgfHwgdHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1x1MDBBNVx1MDBBNScpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTJ9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3Ioe2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMX0pO1xyXG5cdFx0XHRcdFx0XHR0aGlzLnJlcGFyc2VBcnRpY2xlID0ge2NoZWNrOiB0cnVlLCBiZWdpbkxpbmVOdW1iZXI6Y3Vyc29yLmxpbmV9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHRcdFx0XHRcdGVsc2UgaWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJyQkJylcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0ZWRpdG9yLnNldEN1cnNvcih7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSk7XHJcblx0XHRcdFx0XHRcdHRoaXMucmVwYXJzZUFydGljbGUgPSB7Y2hlY2s6IHRydWUsIGJlZ2luTGluZU51bWJlcjpjdXJzb3IubGluZX07XHJcblx0XHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihjaGFyYWN0ZXIyY3Vyc29yMT09PSckXHVGRkU1JCcgfHwgY2hhcmFjdGVyMmN1cnNvcjE9PT0nJFx1MDBBNSQnKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICckJCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKGN1cnNvcik7XHJcblx0XHRcdFx0XHRcdHRoaXMucmVwYXJzZUFydGljbGUgPSB7Y2hlY2s6IHRydWUsIGJlZ2luTGluZU51bWJlcjpjdXJzb3IubGluZX07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjYXNlICdbJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1x1MzAxMCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1tbJyAmJiB0d29DaGFyYWN0ZXJzQWZ0ZXJDdXJzb3IhPSddXScgJiYhZWRpdG9yLnNvbWV0aGluZ1NlbGVjdGVkKCkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1tbXV0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMn0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcihjdXJzb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY2FzZSAnYCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdcdTAwQjcnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHR3b0NoYXJhY3RlcnNCZWZvcmVDdXJzb3IgPT09ICdcdTAwQjdcdTAwQjcnKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdgYCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0yfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTF9KTtcclxuXHRcdFx0XHRcdFx0dGhpcy5yZXBhcnNlQXJ0aWNsZSA9IHtjaGVjazogdHJ1ZSwgYmVnaW5MaW5lTnVtYmVyOmN1cnNvci5saW5lfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihjaGFyYWN0ZXIyY3Vyc29yMT09PSdgXHUwMEI3YCcpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2AnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaCsxfSk7XHJcblx0XHRcdFx0XHRcdHRoaXMucmVwYXJzZUFydGljbGUgPSB7Y2hlY2s6IHRydWUsIGJlZ2luTGluZU51bWJlcjpjdXJzb3IubGluZX07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnXHVGRjFBJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJzonOlxyXG5cdFx0XHRcdGNhc2UgYDtgOlxyXG5cdFx0XHRcdGNhc2UgYFx1RkYxQmA6XHJcblx0XHRcdFx0XHRpZih0d29DaGFyYWN0ZXJzQmVmb3JlQ3Vyc29yID09PSAnXHVGRjFCXHVGRjFCJylcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcclxuXHRcdFx0XHRcdFx0XHQnOycsXHJcblx0XHRcdFx0XHRcdFx0e2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMn0sXHJcblx0XHRcdFx0XHRcdFx0e2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9XHJcblx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdGVkaXRvci5zZXRDdXJzb3Ioe2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMX0pO1xyXG5cdFx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1x1RkYxQVx1RkYxQScpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzonLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMn0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgYCxgOlxyXG5cdFx0XHRcdGNhc2UgYFx1RkYwQ2A6XHJcblx0XHRcdFx0XHRpZih0d29DaGFyYWN0ZXJzQmVmb3JlQ3Vyc29yID09PSAnXHVGRjBDXHVGRjBDJylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0yfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTF9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdcdTMwMDEnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnLyc6XHJcblx0XHRcdFx0XHRpZihjdXJzb3IuY2g9PT0xICYmIGNoYXJCZWZvcmVDdXJzb3I9PT0nXHUzMDAxJylcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcvJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTF9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcblx0XHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZih0d29DaGFyYWN0ZXJzQmVmb3JlQ3Vyc29yID09PSAnXHUzMDAxXHUzMDAxJylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0yfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTF9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdcdTMwMDInOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnLic6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1x1MzAwMlx1MzAwMicpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJy4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMn0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnKCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdcdUZGMDgnOlxyXG5cdFx0XHRcdFx0aWYgKGNoYXJCZWZvcmVDdXJzb3I9PT0nXHVGRjA4JyAmJiB0d29DaGFyYWN0ZXJzTmVhckN1cnNvciE9J1x1RkYwOFx1RkYwOScpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXHVGRjA4XHVGRjA5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTF9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcblx0XHRcdFx0XHRcdGVkaXRvci5zZXRDdXJzb3Ioe2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9KTtcclxuXHRcdFx0XHRcdH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHR3b0NoYXJhY3RlcnNCZWZvcmVDdXJzb3IgPT09ICdcdUZGMDhcdUZGMDgnICYmIHR3b0NoYXJhY3RlcnNOZWFyQ3Vyc29yPT09J1x1RkYwOFx1RkYwOScpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJygpJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTJ9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2grMX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnXHUzMDBCJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJz4nOlxyXG5cdFx0XHRcdFx0aWYoY3Vyc29yLmNoPT09MSAmJiBjaGFyQmVmb3JlQ3Vyc29yPT09J1x1MzAwQicpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG5cdFx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1x1MzAwQlx1MzAwQicpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJz4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMn0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cdFx0XHRcdFx0ZWxzZSBpZih0d29DaGFyYWN0ZXJzQmVmb3JlQ3Vyc29yID09PSAnPlx1MzAwQicpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKGN1cnNvcik7XHJcblx0XHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICc8JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1x1MzAwQSc6XHJcblx0XHRcdFx0XHRpZiAoY2hhckJlZm9yZUN1cnNvcj09PSdcdTMwMEEnICYmIHR3b0NoYXJhY3RlcnNOZWFyQ3Vyc29yIT0nXHUzMDBBXHUzMDBCJylcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcdTMwMEFcdTMwMEInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuXHRcdFx0XHRcdFx0ZWRpdG9yLnNldEN1cnNvcih7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH0pO1xyXG5cdFx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1x1MzAwQVx1MzAwQScgJiYgdHdvQ2hhcmFjdGVyc05lYXJDdXJzb3I9PT0nXHUzMDBBXHUzMDBCJylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0yfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoKzF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3Ioe2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHRcdFx0XHRjYXNlICchJzpcclxuXHRcdFx0XHRjYXNlICdcdUZGMDEnOlxyXG5cdFx0XHRcdFx0aWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1x1RkYwMVx1RkYwMScpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyEnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMn0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0xfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ3wnOlxyXG5cdFx0XHRcdGNhc2UgJ1x1RkY1Qyc6XHJcblx0XHRcdFx0XHRpZih0d29DaGFyYWN0ZXJzQmVmb3JlQ3Vyc29yID09PSAnXHVGRjVDXHVGRjVDJylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnfCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0yfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNofVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTF9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnXCInOlxyXG5cdFx0XHRcdFx0aWYgKGNoYXJCZWZvcmVDdXJzb3I9PT0nXHUyMDFDJyAmJiB0d29DaGFyYWN0ZXJzTmVhckN1cnNvciE9J1x1MjAxQ1x1MjAxRCcpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXHUyMDFDXHUyMDFEJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTF9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcblx0XHRcdFx0XHRcdGVkaXRvci5zZXRDdXJzb3Ioe2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1x1MjAxQ1x1MjAxRCcgJiYgdHdvQ2hhcmFjdGVyc05lYXJDdXJzb3I9PT0nXHUyMDFEXHUyMDFEJylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCJcIicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0yfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoKzF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3Ioe2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlICdcXCcnOlxyXG5cdFx0XHRcdFx0aWYgKGNoYXJCZWZvcmVDdXJzb3I9PT0nXHUyMDE4JyAmJiB0d29DaGFyYWN0ZXJzTmVhckN1cnNvciE9J1x1MjAxOFx1MjAxOScpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoXHJcblx0XHRcdFx0XHRcdFx0J1x1MjAxOFx1MjAxOScsXHJcblx0XHRcdFx0XHRcdFx0e2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2gtMX0sXHJcblx0XHRcdFx0XHRcdFx0e2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9XHJcblx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdGVkaXRvci5zZXRDdXJzb3Ioe2xpbmU6IGN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2h9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYodHdvQ2hhcmFjdGVyc0JlZm9yZUN1cnNvciA9PT0gJ1x1MjAxOFx1MjAxOScgJiYgdHdvQ2hhcmFjdGVyc05lYXJDdXJzb3I9PT0nXHUyMDE5XHUyMDE5JylcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcclxuXHRcdFx0XHRcdFx0XHQnXFwnXFwnJyxcclxuXHRcdFx0XHRcdFx0XHR7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaC0yfSxcclxuXHRcdFx0XHRcdFx0XHR7bGluZTogY3Vyc29yLmxpbmUsIGNoOmN1cnNvci5jaCsxfVxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRlZGl0b3Iuc2V0Q3Vyc29yKHtsaW5lOiBjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTF9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHRcdGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuXHRcdHRoaXMudXBkYXRlU2VsZWN0aW9uKGVkaXRvcik7XHJcblxyXG5cdFx0Ly8gXHU5MUNEXHU2NUIwXHU4OUUzXHU2NzkwXHU1MTY4XHU2NTg3XHJcblx0XHR0aGlzLnVwZGF0ZUFydGljbGVQYXJ0cyhlZGl0b3IpO1xyXG5cclxuXHRcdC8vIFx1NTcyOFx1OTc1RVx1NjU4N1x1NjcyQ1x1ODg0Q1x1N0YxNlx1OEY5MVx1NjVGNlx1RkYwQ1x1NjVFMFx1OTcwMFx1NjgzQ1x1NUYwRlx1NTMxNlxyXG5cdFx0aWYoZ2V0TGluZVR5cGVGcm9tQXJ0aWNsZVBhcnRzKGN1cnNvci5saW5lLCB0aGlzLmFydGljbGVQYXJ0cykgIT1MaW5lVHlwZS50ZXh0KVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLnByZXZDdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcblx0XHRcdHRoaXMuZWRpdG9yQ2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS1cdTVCRjlcdTY1ODdcdTY3MkNcdThGREJcdTg4NENcdTY4M0NcdTVGMEZcdTUzMTYtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmKCF0aGlzLnNldHRpbmdzLkZvcm1hdHRpbmdXaGVuTGluZUVuZClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy51cGRhdGVMaW5lKGVkaXRvciwgY3Vyc29yLmxpbmUsIGN1cnNvciwgdGhpcy5zZXR0aW5ncywgdGhpcy5wcmV2Q3Vyc29yKTtcclxuXHRcdH1cclxuXHRcdHRoaXMucHJldkN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuXHRcdHRoaXMuZWRpdG9yQ2hhbmdlZCA9IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0aXNUZXh0UGFydD0obGluZUluZGV4Om51bWJlcik6Ym9vbGVhbj0+XHJcblx0e1xyXG5cdFx0aWYoZ2V0TGluZVR5cGVGcm9tQXJ0aWNsZVBhcnRzKGxpbmVJbmRleCwgdGhpcy5hcnRpY2xlUGFydHMpID09PSBMaW5lVHlwZS50ZXh0KVxyXG5cdFx0e1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGhhbmRsZUNsaWNrPSgpPT5cclxuXHR7XHJcblx0XHRpZih0aGlzLnNldHRpbmdzLkRlYnVnKSBjb25zb2xlLmxvZygnPT09PkNsaWNrIGV2ZW50IHRyaWdnZXJlZCcpO1xyXG5cdFx0bGV0IGVkaXRvciA9IHRoaXMuZ2V0RWRpdG9yKCk7XHJcblx0XHRpZighZWRpdG9yKSByZXR1cm47XHJcblx0XHR0aGlzLnByZXZDdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcblx0XHR0aGlzLnVwZGF0ZVNlbGVjdGlvbihlZGl0b3IpO1xyXG5cdH1cclxuXHJcblx0aGFuZGxlRmlsZU9wZW49KGZpbGU6IFRGaWxlIHwgbnVsbCk6dm9pZD0+XHJcblx0e1xyXG5cdFx0aWYoZmlsZSE9bnVsbClcclxuXHRcdHtcclxuXHRcdFx0aWYodGhpcy5zZXR0aW5ncy5EZWJ1ZykgY29uc29sZS5sb2coXCI9PT0+RmlsZSBvcGVuOlwiLCBmaWxlLnZhdWx0LmdldE5hbWUoKSsnLycrZmlsZS5wYXRoKTtcclxuXHRcdFx0dGhpcy5yZXBhcnNlQXJ0aWNsZSA9IHtjaGVjazogdHJ1ZSwgYmVnaW5MaW5lTnVtYmVyOiAwfTtcclxuXHRcdFx0dGhpcy5hcnRpY2xlUGFydHMgPSBudWxsO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0fVxyXG5cclxuXHRoYW5kbGVQYXN0ZT0oZXZ0OiBDbGlwYm9hcmRFdmVudCwgZWRpdG9yOiBFZGl0b3IsIG1hcmtkb3duVmlldzogTWFya2Rvd25WaWV3KTp2b2lkPT5cclxuXHR7XHJcblx0XHRsZXQgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG5cdFx0aWYodGhpcy5zZXR0aW5ncy5EZWJ1ZylcclxuXHRcdHtcclxuXHRcdFx0Y29uc29sZS5sb2coJz09PT5CZWZvcmUtUGFzdGUnKTtcclxuXHRcdFx0Ly8gY29uc29sZS5sb2coZWRpdG9yLmdldExpbmUoY3Vyc29yLmxpbmUpKTtcclxuXHRcdH1cclxuXHRcdHRoaXMucmVwYXJzZUFydGljbGUgPSB7Y2hlY2s6IHRydWUsIGJlZ2luTGluZU51bWJlcjogY3Vyc29yLmxpbmV9O1xyXG5cdFx0dGhpcy51cGRhdGVBcnRpY2xlUGFydHMoZWRpdG9yKTtcclxuXHR9XHJcblxyXG5cdGhhbmRsZUNoYW5nZT0oZWRpdG9yOiBFZGl0b3IsIG1hcmtkb3duVmlldzogTWFya2Rvd25WaWV3KTp2b2lkPT5cclxuXHR7XHJcblx0XHRpZih0aGlzLnNldHRpbmdzLkRlYnVnKVxyXG5cdFx0e1xyXG5cdFx0XHRjb25zb2xlLmxvZygnPT09PkNoYW5nZSBFdmVudCcpO1xyXG5cdFx0XHQvLyBjb25zb2xlLmxvZyhlZGl0b3IuZ2V0TGluZShlZGl0b3IuZ2V0Q3Vyc29yKCkubGluZSkpO1xyXG5cdFx0fVx0XHRcclxuXHRcdHRoaXMuZWRpdG9yQ2hhbmdlZCA9IHRydWU7XHJcblx0fVxyXG5cclxuXHRoYW5kbGVTZWxlY3RCZWdpbj0oZXY6IEV2ZW50KTp2b2lkPT5cclxuXHR7XHJcblx0XHRpZih0aGlzLmtleURvd25GbGFnKSByZXR1cm47XHJcblx0XHRpZih0aGlzLnNldHRpbmdzLkRlYnVnKVxyXG5cdFx0e1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIj09PT5TZWxlY3QgRXZlbnRcIik7XHJcblx0XHR9XHJcblx0XHRsZXQgZWRpdG9yID0gdGhpcy5nZXRFZGl0b3IoKTtcclxuXHRcdGlmKCFlZGl0b3IpIHJldHVybjtcclxuXHRcdHRoaXMudXBkYXRlU2VsZWN0aW9uKGVkaXRvcik7XHJcblx0fVxyXG5cclxuXHR1cGRhdGVBcnRpY2xlUGFydHM9KGVkaXRvcjogRWRpdG9yKTp2b2lkPT5cclxuXHR7XHJcblx0XHRpZih0aGlzLnJlcGFyc2VBcnRpY2xlLmNoZWNrIHx8IHRoaXMuYXJ0aWNsZVBhcnRzID09PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLmFydGljbGVQYXJ0cyA9IHJlcGFyc2VBcnRpY2xlUGFydHMoZWRpdG9yLmdldFZhbHVlKCksIHRoaXMuYXJ0aWNsZVBhcnRzLCB0aGlzLnJlcGFyc2VBcnRpY2xlLmJlZ2luTGluZU51bWJlciwgdGhpcy5zZXR0aW5ncy5EZWJ1Zyk7XHJcblx0XHRcdHRoaXMucmVwYXJzZUFydGljbGUuY2hlY2sgPSBmYWxzZTtcclxuXHRcdFx0Ly8gaWYodGhpcy5zZXR0aW5ncy5EZWJ1ZykgdGhpcy5wcmludEFydGljbGVQYXJ0cyhlZGl0b3IpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpbnRBcnRpY2xlUGFydHM9KGVkaXRvcjogRWRpdG9yKTp2b2lkPT5cclxuXHR7XHJcblx0XHRsZXQgYXJ0aWNsZSA9IGVkaXRvci5nZXRWYWx1ZSgpO1xyXG5cdFx0bGV0IGxpbmVzID0gYXJ0aWNsZS5zcGxpdCgnXFxuJyk7XHJcblx0XHRjb25zb2xlLmxvZygnfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4nKTtcclxuXHRcdGZvciAobGV0IGk9MDtpPHRoaXMuYXJ0aWNsZVBhcnRzLmxlbmd0aDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIkFydGljbGUgUGFydDpcIiwgdGhpcy5hcnRpY2xlUGFydHNbaV0udHlwZSwgdGhpcy5hcnRpY2xlUGFydHNbaV0uYmVnaW4sIHRoaXMuYXJ0aWNsZVBhcnRzW2ldLmVuZCk7XHJcblx0XHRcdGZvcihsZXQgaj10aGlzLmFydGljbGVQYXJ0c1tpXS5iZWdpbjsgajx0aGlzLmFydGljbGVQYXJ0c1tpXS5lbmQ7aisrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29uc29sZS5sb2cobGluZXNbal0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRjb25zb2xlLmxvZygnfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4nKTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZVNlbGVjdGlvbj0oZWRpdG9yOiBFZGl0b3IpOnZvaWQ9PlxyXG5cdHtcclxuXHRcdHRoaXMuc2VsZWN0ZWRUZXh0ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cdFx0dGhpcy51cGRhdGVDaGFyQXJvdW5kQ3Vyc29yKGVkaXRvcik7XHJcblx0fVxyXG5cclxuXHR1cGRhdGVDaGFyQXJvdW5kQ3Vyc29yPShlZGl0b3I6IEVkaXRvcik6dm9pZD0+XHJcblx0e1xyXG5cdFx0Ly8gaWYodGhpcy5zZXR0aW5ncy5EZWJ1ZykgY29uc29sZS5sb2coXCJ1cGRhdGUgc2VsZWN0aW9uOlxcblwiICsgdGhpcy5zZWxlY3RlZFRleHQpO1xyXG5cdFx0aWYodGhpcy5zZWxlY3RlZFRleHQhPVwiXCIpIHJldHVybjtcclxuXHRcdGxldCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcblx0XHRcclxuXHRcdGlmKGN1cnNvci5jaCE9MCl7XHJcblx0XHRcdHRoaXMuY2hhckJlZm9yZUN1cnNvciA9IGVkaXRvci5nZXRSYW5nZSh7bGluZTpjdXJzb3IubGluZSwgY2g6Y3Vyc29yLmNoLTF9LCBjdXJzb3IpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZXtcclxuXHRcdFx0dGhpcy5jaGFyQmVmb3JlQ3Vyc29yID0gY3Vyc29yLmxpbmUhPTA/XCJcXG5cIjpcIlwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKGN1cnNvci5jaCAhPSBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSkubGVuZ3RoKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLmNoYXJBZnRlckN1cnNvciA9IGVkaXRvci5nZXRSYW5nZShjdXJzb3IsIHtsaW5lOmN1cnNvci5saW5lLCBjaDpjdXJzb3IuY2grMX0pO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZXtcclxuXHRcdFx0dGhpcy5jaGFyQWZ0ZXJDdXJzb3IgPSBjdXJzb3IubGluZSE9ZWRpdG9yLmxpbmVDb3VudCgpLTE/XCJcXG5cIjpcIlwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGlmKHRoaXMuc2V0dGluZ3MuRGVidWcpXHJcblx0XHQvLyB7XHJcblx0XHQvLyBcdGNvbnNvbGUubG9nKFwiY2hhckJlZm9yZUN1cnNvclwiLCB0aGlzLmNoYXJCZWZvcmVDdXJzb3IpO1xyXG5cdFx0Ly8gXHRjb25zb2xlLmxvZyhcImNoYXJBZnRlckN1cnNvclwiLCB0aGlzLmNoYXJBZnRlckN1cnNvcik7XHJcblx0XHQvLyB9XHJcblx0fVxyXG5cclxuXHRGb3JtYXRMaW5lV2l0aG91dENoZWNrUGFydD0oZWRpdG9yOiBFZGl0b3IsIGxpbmU6bnVtYmVyKTp2b2lkPT5cclxuXHR7XHJcblx0XHRsZXQgbGluZVN0cmluZyA9IGVkaXRvci5nZXRMaW5lKGxpbmUpO1xyXG5cdFx0bGV0IGNzID0ge2xpbmU6IGxpbmUsIGNoOmxpbmVTdHJpbmcubGVuZ3RofTtcclxuXHRcdGxldCBmb3JtYXR0ZWRDaGFuZ2UgPSBmb3JtYXRMaW5lKGxpbmVTdHJpbmcsIGNzLCB0aGlzLnNldHRpbmdzKTtcclxuXHRcdGxldCBjaGFuZ2VkTGluZSA9IGZvcm1hdHRlZENoYW5nZVswXTtcclxuXHRcdGlmKGNoYW5nZWRMaW5lICE9IGxpbmVTdHJpbmcpXHJcblx0XHR7XHJcblx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoY2hhbmdlZExpbmUsIHtsaW5lOmxpbmUsIGNoOjB9LCBjcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHR1cGRhdGVMaW5lPShlZGl0b3I6IEVkaXRvciwgbGluZUluZGV4OiBudW1iZXIsIGN1ckN1cnNvcjogRWRpdG9yUG9zaXRpb24sIHNldHRpbmdzOiBGb3JtYXRTZXR0aW5ncywgXHJcblx0XHRwcmV2Q3Vyc29yPzogRWRpdG9yUG9zaXRpb24sIHNldEN1cnNvcj86IEVkaXRvclBvc2l0aW9uKTp2b2lkPT5cclxuXHR7XHJcblx0XHRsZXQgZm9ybWF0dGVkQ2hhbmdlID0gZm9ybWF0TGluZShlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpLCBjdXJDdXJzb3IsIHRoaXMuc2V0dGluZ3MsIHRoaXMucHJldkN1cnNvcik7XHJcblx0XHRsZXQgcmVzdWx0TGluZSA9IGZvcm1hdHRlZENoYW5nZVswXTtcclxuXHRcdGxldCByZXN1bHRDdXJvc3JDaDogbnVtYmVyID0gZm9ybWF0dGVkQ2hhbmdlWzFdO1xyXG5cdFx0bGV0IGlubGluZUNoYW5nZUxpc3Q6IElubGluZUNoYW5nZVtdPSBmb3JtYXR0ZWRDaGFuZ2VbMl07XHJcblxyXG5cdFx0Ly8gbGV0IG9yaWdpbkxpbmVTdHJpbmcgPSBlZGl0b3IuZ2V0TGluZShsaW5lSW5kZXgpO1xyXG5cdFx0Ly8gbGV0IGN1cnNvckxpbmVCZWdpbiA9IHtsaW5lOiBsaW5lSW5kZXgsIGNoOjB9O1xyXG5cdFx0Ly8gbGV0IGN1cnNvckxpbmVFbmQgPSB7bGluZTogbGluZUluZGV4LCBjaDpvcmlnaW5MaW5lU3RyaW5nLmxlbmd0aH07XHJcblx0XHQvLyBlZGl0b3IucmVwbGFjZVJhbmdlKG9yaWdpbkxpbmVTdHJpbmcsIGN1cnNvckxpbmVCZWdpbiwgY3Vyc29yTGluZUVuZCk7XHJcblxyXG5cdFx0Ly8gQXBwbHkgQ2hhbmdlc1xyXG5cdFx0aWYoaW5saW5lQ2hhbmdlTGlzdC5sZW5ndGggIT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBmb3IobGV0IGk9MDtpPGlubGluZUNoYW5nZUxpc3QubGVuZ3RoO2krKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoYW5nZUJlZ2luOkVkaXRvclBvc2l0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmVJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBjaDogaW5saW5lQ2hhbmdlTGlzdFtpXS5iZWdpbitvZmZzZXRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBjaGFuZ2VFbmQ6RWRpdG9yUG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZUluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoOiBpbmxpbmVDaGFuZ2VMaXN0W2ldLmVuZCtvZmZzZXRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBpbmxpbmVDaGFuZ2VMaXN0W2ldLnRleHQubGVuZ3RoIC0gaW5saW5lQ2hhbmdlTGlzdFtpXS5vcmlnaW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShpbmxpbmVDaGFuZ2VMaXN0W2ldLnRleHQsIGNoYW5nZUJlZ2luLCBjaGFuZ2VFbmQpO1xyXG4gICAgICAgICAgICB9XHJcblx0XHRcdGlmKCFzZXRDdXJzb3IpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRlZGl0b3Iuc2V0Q3Vyc29yKHtcclxuXHRcdFx0XHRcdGxpbmU6IGxpbmVJbmRleCxcclxuXHRcdFx0XHRcdGNoOiByZXN1bHRDdXJvc3JDaFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGVkaXRvci5zZXRDdXJzb3Ioc2V0Q3Vyc29yKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBjb25zb2xlLmxvZygnY3Vyc29yIGNoJywgcmVzdWx0Q3Vyb3NyQ2gpOyAgICAgICAgICAgIFxyXG5cdFx0XHRlZGl0b3IuZm9jdXMoKTtcclxuICAgICAgICB9XHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBFYXN5VHlwaW5nU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogRWFzeVR5cGluZ1BsdWdpbjtcclxuXHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogRWFzeVR5cGluZ1BsdWdpbikge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0fVxyXG5cclxuXHRkaXNwbGF5KCk6IHZvaWQge1xyXG5cdFx0bGV0IHtjb250YWluZXJFbH0gPSB0aGlzO1xyXG5cclxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblxyXG5cdFx0Ly8gY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywge3RleHQ6ICdTZXR0aW5ncyBmb3IgRWFzeSBUeXBpbmcuJ30pO1xyXG5cclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnYScsIHt0ZXh0OiAnTW9yZSBkZXRhaWwgaXMgaW4gR2l0aHViOiBlYXN5LXR5cGluZy1vYnNpZGlhbicsIGhyZWY6J2h0dHBzOi8vZ2l0aHViLmNvbS9ZYW96aHV3YS9lYXN5LXR5cGluZy1vYnNpZGlhbid9KTtcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHt0ZXh0OiAnXHU2MDNCXHU1RjAwXHU1MTczIChNYXN0ZXIgU3dpdGNoKSd9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdC5zZXROYW1lKFwiQXV0byBmb3JtYXR0aW5nIHdoZW4gdHlwaW5nXCIpXHJcblx0XHQuc2V0RGVzYyhcIlx1NjYyRlx1NTQyNlx1NTcyOFx1N0YxNlx1OEY5MVx1NjU4N1x1Njg2M1x1NjVGNlx1ODFFQVx1NTJBOFx1NjgzQ1x1NUYwRlx1NTMxNlx1NjU4N1x1NjcyQ1wiKVxyXG5cdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKT0+e1xyXG5cdFx0XHR0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuQXV0b0Zvcm1hdHRpbmcpXHJcblx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpPT57XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuQXV0b0Zvcm1hdHRpbmcgPSB2YWx1ZTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkF1dG9Gb3JtYXR0aW5nOlwiLHZhbHVlKTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdC5zZXROYW1lKFwiTGluZU1vZGU6IE9ubHkgZm9ybWF0dGluZyB3aGVuIGxpbmUgZW5kLlwiKVxyXG5cdFx0LnNldERlc2MoXCJcdTg4NENcdTZBMjFcdTVGMEZcdUZGMUFcdTUzRUFcdTU3MjhcdTRFMDBcdTg4NENcdThGOTNcdTUxNjVcdTdFRDNcdTY3NUZcdUZGMENcdTU2REVcdThGNjZcdTUyMUJcdTVFRkFcdTY1QjBcdTg4NENcdTc2ODRcdTY1RjZcdTUwMTlcdUZGMENcdTVCRjlcdThCRTVcdTg4NENcdThGREJcdTg4NENcdTY4M0NcdTVGMEZcdTUzMTZcdTMwMDJcIilcclxuXHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSk9PntcclxuXHRcdFx0dG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLkZvcm1hdHRpbmdXaGVuTGluZUVuZClcclxuXHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSk9PntcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5Gb3JtYXR0aW5nV2hlbkxpbmVFbmQgPSB2YWx1ZTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkZvcm1hdHRpbmdXaGVuTGluZUVuZDpcIix2YWx1ZSk7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywge3RleHQ6ICdcdThCRTZcdTdFQzZcdTg5QzRcdTUyMTlcdTVGMDBcdTUxNzMgKFN1YiBTd2l0Y2hlcyknfSk7XHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQuc2V0TmFtZShcIkZ1bGwtV2lkdGggc3ltYm9sIGlucHV0IGVuaGFuY2VtZW50XCIpXHJcblx0XHQuc2V0RGVzYyhcIlx1NTE2OFx1ODlEMlx1N0IyNlx1NTNGN1x1OEY5M1x1NTE2NVx1NTg5RVx1NUYzQVwiKVxyXG5cdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKT0+e1xyXG5cdFx0XHR0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuRnVsbFdpZHRoQ2hhcmFjdGVyRW5oYW5jZSkub25DaGFuZ2UoYXN5bmMgKHZhbHVlKT0+e1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLkZ1bGxXaWR0aENoYXJhY3RlckVuaGFuY2UgPSB2YWx1ZTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdC5zZXROYW1lKFwiU3BhY2UgYmV0d2VlbiBDaGluZXNlIGFuZCBFbmdsaXNoL251bWJlclwiKVxyXG5cdFx0LnNldERlc2MoXCJcdTU3MjhcdTRFMkRcdTY1ODdcdTU0OENcdTgyRjFcdTY1ODcvXHU2NTcwXHU1QjU3XHU5NUY0XHU3QTdBXHU2ODNDXCIpXHJcblx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpPT57XHJcblx0XHRcdHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5DaGluZXNlRW5nbGlzaFNwYWNlKS5vbkNoYW5nZShhc3luYyAodmFsdWUpPT57XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuQ2hpbmVzZUVuZ2xpc2hTcGFjZSA9IHZhbHVlO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoXCJEZWxldGUgdGhlIFNwYWNlIGJldHdlZW4gQ2hpbmVzZSBjaGFyYWN0ZXJzXCIpXHJcblx0XHQuc2V0RGVzYyhcIlx1NTcyOFx1NEUyRFx1NjU4N1x1NUI1N1x1N0IyNlx1OTVGNFx1NTNCQlx1OTY2NFx1N0E3QVx1NjgzQ1wiKVxyXG5cdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKT0+e1xyXG5cdFx0XHR0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuQ2hpbmVzZU5vU3BhY2UpLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSk9PntcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5DaGluZXNlTm9TcGFjZSA9IHZhbHVlO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoXCJTbWFydGx5IGluc2VydCBzcGFjZSBiZXR3ZWVuIHRleHQgYW5kIHB1bmN0dWF0aW9uXCIpXHJcblx0XHQuc2V0RGVzYyhcIlx1NTcyOFx1NjU4N1x1NjcyQ1x1NTQ4Q1x1NjgwN1x1NzBCOVx1OTVGNFx1NjY3QVx1ODBGRFx1N0E3QVx1NjgzQ1wiKVxyXG5cdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKT0+e1xyXG5cdFx0XHR0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuUHVuY3R1YXRpb25TcGFjZSkub25DaGFuZ2UoYXN5bmMgKHZhbHVlKT0+e1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLlB1bmN0dWF0aW9uU3BhY2UgPSB2YWx1ZTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdC5zZXROYW1lKFwiQ2FwaXRhbGl6ZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGV2ZXJ5IHNlbnRlbmNlXCIpXHJcblx0XHQuc2V0RGVzYyhcIlx1ODJGMVx1NjU4N1x1NkJDRlx1NEUyQVx1NTNFNVx1OTk5Nlx1NUI1N1x1NkJDRFx1NTkyN1x1NTE5OVwiKVxyXG5cdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKT0+e1xyXG5cdFx0XHR0b2dnbGUuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuQ2FwaXRhbGl6YXRpb24pLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSk9PntcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5DYXBpdGFsaXphdGlvbiA9IHZhbHVlO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoXCJTcGFjZSBiZXR3ZWVuIGlubGluZSBjb2RlIGFuZCB0ZXh0XCIpXHJcblx0XHQuc2V0RGVzYyhcIlx1NTcyOCBgXHU4ODRDXHU1MTg1XHU0RUUzXHU3ODAxYCBcdTU0OENcdTY1ODdcdTY3MkNcdTk1RjRcdTdBN0FcdTY4M0NcIilcclxuXHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSk9PntcclxuXHRcdFx0dG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLklubGluZUNvZGVTcGFjZSkub25DaGFuZ2UoYXN5bmMgKHZhbHVlKT0+e1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLklubGluZUNvZGVTcGFjZSA9IHZhbHVlO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoXCJTcGFjZSBiZXR3ZWVuIGlubGluZSBmb3JtdWxhIGFuZCB0ZXh0XCIpXHJcblx0XHQuc2V0RGVzYyhcIlx1NTcyOCAkXHU4ODRDXHU1MTg1XHU1MTZDXHU1RjBGJCBcdTU0OENcdTY1ODdcdTY3MkNcdTk1RjRcdTdBN0FcdTY4M0NcIilcclxuXHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSk9PntcclxuXHRcdFx0dG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLklubGluZUZvcm11bGFTcGFjZSkub25DaGFuZ2UoYXN5bmMgKHZhbHVlKT0+e1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLklubGluZUZvcm11bGFTcGFjZSA9IHZhbHVlO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoXCJTcGFjZSBiZXR3ZWVuIGxpbmsgYW5kIHRleHRcIilcclxuXHRcdC5zZXREZXNjKFwiXHU1NzI4IFtbd2lraWxpbmtdXSBtZGxpbmsgXHU1NDhDXHU2NTg3XHU2NzJDXHU5NUY0XHU3QTdBXHU2ODNDXCIpXHJcblx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpPT57XHJcblx0XHRcdHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5MaW5rU3BhY2UpLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSk9PntcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5MaW5rU3BhY2UgPSB2YWx1ZTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQuc2V0TmFtZShcIlNtYXJ0IFNwYWNlIGJldHdlZW4gbGluayBhbmQgdGV4dFwiKVxyXG5cdFx0LnNldERlc2MoXCJcdTU3MjggW1t3aWtpbGlua11dIG1kbGluayBcdTU0OENcdTY1ODdcdTY3MkNcdTk1RjRcdTY2N0FcdTgwRkRcdTdBN0FcdTY4M0NcIilcclxuXHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSk9PntcclxuXHRcdFx0dG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLkxpbmtTbWFydFNwYWNlKS5vbkNoYW5nZShhc3luYyAodmFsdWUpPT57XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuTGlua1NtYXJ0U3BhY2UgPSB2YWx1ZTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ1x1ODFFQVx1NUI5QVx1NEU0OVx1NkI2M1x1NTIxOSAoQ3VzdG9tIHJlZ3VsYXIgZXhwcmVzc2lvbnMpJ30pO1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoXCJVc2VyIERlZmluZWQgUmVnRXhwIFN3aXRjaFwiKVxyXG5cdFx0LnNldERlc2MoXCJcdTgxRUFcdTVCOUFcdTRFNDlcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdTVGMDBcdTUxNzNcdUZGMENcdTUzMzlcdTkxNERcdTUyMzBcdTc2ODRcdTUxODVcdTVCQjlcdTRFMERcdThGREJcdTg4NENcdTY4M0NcdTVGMEZcdTUzMTZcIilcclxuXHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSk9PntcclxuXHRcdFx0dG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLlVzZXJEZWZpbmVkUmVnU3dpdGNoKS5vbkNoYW5nZShhc3luYyAodmFsdWUpPT57XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuVXNlckRlZmluZWRSZWdTd2l0Y2ggPSB2YWx1ZTtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdC5zZXROYW1lKFwiU3BhY2UgYmV0d2VlbiBVc2VyIERlZmluZWQgUGFydChzZWxlY3RlZCBieSBSZWdFeHApIGFuZCB0ZXh0XCIpXHJcblx0XHQuc2V0RGVzYyhcIlx1NTcyOFx1NzUyOFx1NjIzN1x1ODFFQVx1NUI5QVx1NEU0OVx1NTMzQVx1NTc1NyhcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdTkwMDlcdTYyRTkpXHU1NDhDXHU2NTg3XHU2NzJDXHU0RTRCXHU5NUY0XHU3QTdBXHU2ODNDXCIpXHJcblx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpPT57XHJcblx0XHRcdHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5Vc2VyUGFydFNwYWNlKS5vbkNoYW5nZShhc3luYyAodmFsdWUpPT57XHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuVXNlclBhcnRTcGFjZSA9IHZhbHVlO1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cclxuXHJcblx0XHRjb25zdCByZWdDb250ZW50QXJlYVNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbCk7XHJcblx0XHRyZWdDb250ZW50QXJlYVNldHRpbmcuc2V0dGluZ0VsLnNldEF0dHJpYnV0ZShcclxuXHRcdFwic3R5bGVcIixcclxuXHRcdFwiZGlzcGxheTogZ3JpZDsgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XCJcclxuXHRcdCk7XHJcblx0XHRyZWdDb250ZW50QXJlYVNldHRpbmdcclxuXHRcdC5zZXROYW1lKFwiVXNlci1kZWZpbmVkIFJlZ0V4cCB0byBpZ25vcmUsIG9uZSBleHByZXNzaW9uIHBlciBsaW5lXCIpXHJcblx0XHQuc2V0RGVzYyhcclxuXHRcdFx0XCJcdTc1MjhcdTYyMzdcdTgxRUFcdTVCOUFcdTRFNDlcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdUZGMENcdTUzMzlcdTkxNERcdTUyMzBcdTc2ODRcdTUxODVcdTVCQjlcdTRFMERcdThGREJcdTg4NENcdTY4M0NcdTVGMEZcdTUzMTZcdUZGMENcdTZCQ0ZcdTg4NENcdTRFMDBcdTRFMkFcdTg4NjhcdThGQkVcdTVGMEZcdUZGMENcdTg4NENcdTVDM0VcdTRFMERcdTg5ODFcdTk2OEZcdTYxMEZcdTUyQTBcdTdBN0FcdTY4M0NcIlxyXG5cdFx0KTtcclxuXHRcdGNvbnN0IHJlZ0NvbnRlbnRBcmVhID0gbmV3IFRleHRBcmVhQ29tcG9uZW50KFxyXG5cdFx0cmVnQ29udGVudEFyZWFTZXR0aW5nLmNvbnRyb2xFbFxyXG5cdFx0KTtcclxuXHRcdHNldEF0dHJpYnV0ZXMocmVnQ29udGVudEFyZWEuaW5wdXRFbCwge1xyXG5cdFx0c3R5bGU6IFwibWFyZ2luLXRvcDogMTJweDsgd2lkdGg6IDEwMCU7ICBoZWlnaHQ6IDMwdmg7XCIsXHJcblx0XHQvLyBjbGFzczogXCJtcy1jc3MtZWRpdG9yXCIsXHJcblx0XHR9KTtcclxuXHRcdHJlZ0NvbnRlbnRBcmVhXHJcblx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuVXNlckRlZmluZWRSZWdFeHApXHJcblx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLlVzZXJEZWZpbmVkUmVnRXhwID0gdmFsdWU7XHJcblx0XHRcdHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0fSk7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IHJlZ0NvbnRlbnRBcmVhID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHQvLyAuc2V0TmFtZShcIlVzZXIgZGVmaW5lZCBSZWdFeHAgdG8gaWdub3JlLCBvbmUgZXhwcmVzc2lvbiBwZXIgbGluZVwiKVxyXG5cdFx0Ly8gLnNldERlc2MoXCJcdTc1MjhcdTYyMzdcdTgxRUFcdTVCOUFcdTRFNDlcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdUZGMENcdTUzMzlcdTkxNERcdTUyMzBcdTc2ODRcdTUxODVcdTVCQjlcdTRFMERcdThGREJcdTg4NENcdTY4M0NcdTVGMEZcdTUzMTZcdUZGMENcdTZCQ0ZcdTg4NENcdTRFMDBcdTRFMkFcdTg4NjhcdThGQkVcdTVGMEZcdUZGMENcdTg4NENcdTVDM0VcdTRFMERcdTg5ODFcdTk2OEZcdTYxMEZcdTUyQTBcdTdBN0FcdTY4M0NcIilcclxuXHRcdC8vIC5hZGRUZXh0QXJlYSgodGV4dCkgPT5cclxuXHRcdC8vIFx0dGV4dFxyXG5cdFx0Ly8gXHQuc2V0UGxhY2Vob2xkZXIoJzpcXFxcdyo6XFxue3suKj99fScpXHJcblx0XHQvLyBcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5Vc2VyRGVmaW5lZFJlZ0V4cClcclxuXHRcdC8vIFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0Ly8gXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLlVzZXJEZWZpbmVkUmVnRXhwID0gdmFsdWU7XHJcbiAgICAgICAgLy8gICAgICAgICBpZih0aGlzLnBsdWdpbi5zZXR0aW5ncy5EZWJ1ZykgY29uc29sZS5sb2coXCJyZWdFeHAgY2hhbmdlZDpcIiwgdmFsdWUpO1xyXG5cdFx0Ly8gXHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0Ly8gXHR9KVxyXG5cdFx0Ly8gKTtcclxuXHJcblxyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdhJywge3RleHQ6ICdSZWdFeHA6IFx1NkI2M1x1NTIxOVx1ODg2OFx1OEZCRVx1NUYwRicsIGhyZWY6J2h0dHBzOi8vamF2YXNjcmlwdC5ydWFueWlmZW5nLmNvbS9zdGRsaWIvcmVnZXhwLmh0bWwjJ30pO1xyXG5cclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ0RlYnVnJ30pO1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0LnNldE5hbWUoXCJQcmludCBkZWJ1ZyBpbmZvIGluIGNvbnNvbGVcIilcclxuXHRcdC5zZXREZXNjKFwiXHU1NzI4XHU2M0E3XHU1MjM2XHU1M0YwXHU4RjkzXHU1MUZBXHU4QzAzXHU4QkQ1XHU0RkUxXHU2MDZGXCIpXHJcblx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpPT57XHJcblx0XHRcdHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5EZWJ1Zykub25DaGFuZ2UoYXN5bmMgKHZhbHVlKT0+e1xyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLkRlYnVnID0gdmFsdWU7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblxyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHsgRWRpdG9yUG9zaXRpb24sIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5cclxuZXhwb3J0IGVudW0gSW5saW5lVHlwZSB7dGV4dD0ndGV4dCcsIGNvZGU9J2NvZGUnLCBmb3JtdWxhPSdmb3JtdWxhJywgbGluaz0nbGluaycsIHVzZXI9J3VzZXItZGVmaW5lZCcsIG5vbmU9J25vbmUnfVxyXG5leHBvcnQgZW51bSBMaW5lVHlwZSB7dGV4dD0ndGV4dCcsIGNvZGU9J2NvZGUnLCBmb3JtdWxhPSdmb3JtdWxhJywgZnJvbnRtYXR0ZXI9J2Zyb250bWF0dGVyJywgbm9uZT0nbm9uZSd9XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFydGljbGVQYXJ0XHJcbntcclxuICAgIHR5cGU6IExpbmVUeXBlO1xyXG4gICAgYmVnaW46IG51bWJlcjtcclxuICAgIGVuZDogbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5saW5lUGFydFxyXG57XHJcbiAgICBjb250ZW50OiBzdHJpbmcsXHJcbiAgICB0eXBlOiBJbmxpbmVUeXBlLFxyXG4gICAgYmVnaW46IG51bWJlcixcclxuICAgIGVuZDogbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5saW5lQ2hhbmdlXHJcbntcclxuICAgIHRleHQ6IHN0cmluZyxcclxuICAgIGJlZ2luOiBudW1iZXIsXHJcbiAgICBlbmQ6IG51bWJlcixcclxuICAgIG9yaWdpbjpzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGb3JtYXRTZXR0aW5nc1xyXG57XHJcbiAgICBBdXRvRm9ybWF0dGluZzogYm9vbGVhbjtcclxuICAgIEZvcm1hdHRpbmdXaGVuTGluZUVuZDogYm9vbGVhbjtcclxuXHRDaGluZXNlRW5nbGlzaFNwYWNlOiBib29sZWFuO1xyXG5cdENoaW5lc2VOb1NwYWNlOiBib29sZWFuO1xyXG4gICAgQ2FwaXRhbGl6YXRpb246IGJvb2xlYW47XHJcblxyXG5cdEVuZ2xpc2hTcGFjZTogYm9vbGVhbjtcclxuXHRCcmFjZVNwYWNlOiBib29sZWFuO1xyXG5cdE51bWJlclNwYWNlOiBib29sZWFuO1xyXG5cclxuICAgIFB1bmN0dWF0aW9uU3BhY2U6IGJvb2xlYW47XHJcbiAgICBJbmxpbmVDb2RlU3BhY2U6IGJvb2xlYW47XHJcblx0SW5saW5lRm9ybXVsYVNwYWNlOiBib29sZWFuO1xyXG4gICAgTGlua1NwYWNlOiBib29sZWFuO1xyXG4gICAgTGlua1NtYXJ0U3BhY2U6IGJvb2xlYW47XHJcblxyXG4gICAgRnVsbFdpZHRoQ2hhcmFjdGVyRW5oYW5jZTpib29sZWFuO1xyXG5cclxuICAgIFVzZXJEZWZpbmVkUmVnRXhwOnN0cmluZztcclxuICAgIFVzZXJEZWZpbmVkUmVnU3dpdGNoOiBib29sZWFuO1xyXG4gICAgVXNlclBhcnRTcGFjZTogYm9vbGVhbjtcclxuXHJcbiAgICBEZWJ1ZzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEZvcm1hdFNldHRpbmdzID0ge1xyXG4gICAgQXV0b0Zvcm1hdHRpbmc6IHRydWUsXHJcbiAgICBGb3JtYXR0aW5nV2hlbkxpbmVFbmQ6IGZhbHNlLFxyXG5cdENoaW5lc2VFbmdsaXNoU3BhY2U6IHRydWUsXHJcblx0Q2hpbmVzZU5vU3BhY2U6IHRydWUsXHJcbiAgICBDYXBpdGFsaXphdGlvbjogdHJ1ZSxcclxuXHJcbiAgICBQdW5jdHVhdGlvblNwYWNlOiB0cnVlLFxyXG5cdEVuZ2xpc2hTcGFjZTogdHJ1ZSxcclxuXHRCcmFjZVNwYWNlOiB0cnVlLFxyXG5cdE51bWJlclNwYWNlOiB0cnVlLFxyXG5cclxuICAgIElubGluZUNvZGVTcGFjZTogdHJ1ZSxcclxuXHRJbmxpbmVGb3JtdWxhU3BhY2U6IHRydWUsXHJcblx0TGlua1NwYWNlOiB0cnVlLFxyXG4gICAgTGlua1NtYXJ0U3BhY2U6IHRydWUsXHJcblxyXG4gICAgRnVsbFdpZHRoQ2hhcmFjdGVyRW5oYW5jZTogdHJ1ZSxcclxuICAgIFVzZXJEZWZpbmVkUmVnRXhwOic6XFxcXHcqOlxcbnt7Lio/fX1cXG48Lio/PlxcblxcXFxbXFxcXCEuKj9cXFxcXVsrLV17MCwxfScsXHJcbiAgICBVc2VyRGVmaW5lZFJlZ1N3aXRjaDogdHJ1ZSxcclxuICAgIFVzZXJQYXJ0U3BhY2U6dHJ1ZSxcclxuICAgIERlYnVnOmZhbHNlXHJcbn1cclxuXHJcbi8vIFx1NUJGOVx1NTkxQVx1ODg0Q1x1NjU4N1x1NjcyQ1x1OEZEQlx1ODg0Q1x1ODlFM1x1Njc5MFx1NUY5N1x1NTIzMFx1NkJDRlx1ODg0Q1x1NzY4NFx1N0M3Qlx1NTc4QlxyXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRBcnRpY2xlKGFydGljbGU6c3RyaW5nLCBjaGVja0Zyb250TWF0dGVyOmJvb2xlYW49dHJ1ZSwgYmVnaW5JbmRleDpudW1iZXI9MCk6IEFydGljbGVQYXJ0W11cclxue1xyXG4gICAgbGV0IHJldEFycmF5OiBBcnRpY2xlUGFydFtdID0gW107XHJcbiAgICBsZXQgbGluZXMgPSBhcnRpY2xlLnNwbGl0KCdcXG4nKTtcclxuICAgIGNvbnNvbGUubG9nKCdsaW5lIG51bWJlcicsIGxpbmVzLmxlbmd0aCk7XHJcbiAgICBsZXQgcmVnTnVsbExpbmUgPSAvXlxccyokLztcclxuICAgIGxldCByZWdGb3JtdWxhQmVnaW4gPSAvXlxccyooXFwtIChcXFtbeCBdXFxdICk/KT9cXCRcXCQvO1xyXG4gICAgbGV0IHJlZ0Zvcm11bGFFbmQgPSAvXFwkXFwkJC87XHJcbiAgICBsZXQgcmVnQ29kZUJlZ2luID0gL15cXHMqYGBgLztcclxuICAgIGxldCByZWdDb2RlRW5kID0gL15cXHMqYGBgJC87XHJcbiAgICBsZXQgaW5kZXggPSBiZWdpbkluZGV4O1xyXG4gICAgbGV0IHJlZ0FkbW9uaXRpb25CbG9ja0JlZ2luID0gL15cXHMqYGBgYWQtXFx3Ky9nO1xyXG5cclxuICAgIC8vIDEuIFx1NTIyNFx1NjVBRCBmcm9udG1hdHRlclx1NTMzQVx1NTdERlxyXG4gICAgaWYoY2hlY2tGcm9udE1hdHRlcilcclxuICAgIHtcclxuICAgICAgICBsZXQgZnJvbnRNYXR0ZXJQYXJ0OiBBcnRpY2xlUGFydDtcclxuICAgICAgICBmb3IobGV0IGk9MDtpPGxpbmVzLmxlbmd0aDtpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihyZWdOdWxsTGluZS50ZXN0KGxpbmVzW2ldKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihsaW5lc1tpXT09PSctLS0nKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGo9aSsxOyBqPGxpbmVzLmxlbmd0aDtqKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYobGluZXNbal09PT0nLS0tJylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGkhPTApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldEFycmF5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IExpbmVUeXBlLnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6aVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbnRNYXR0ZXJQYXJ0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogTGluZVR5cGUuZnJvbnRtYXR0ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogaSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogaisxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldEFycmF5LnB1c2goZnJvbnRNYXR0ZXJQYXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBqKzE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gY29uc29sZS5sb2coJ2luZGV4JywgaW5kZXgpO1xyXG5cclxuICAgIC8vIDIuIFx1OTA0RFx1NTM4Nlx1ODg0Q1x1NUY5N1x1NTIzMCBMaW5lVHlwZSBcdTUyMDZcdTUzM0FcclxuICAgIHdoaWxlKGluZGV4PGxpbmVzLmxlbmd0aClcclxuICAgIHtcclxuICAgICAgICBpZihyZWdDb2RlQmVnaW4udGVzdChsaW5lc1tpbmRleF0pKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGogPSBpbmRleCsxO1xyXG4gICAgICAgICAgICB3aGlsZShqPGxpbmVzLmxlbmd0aClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYocmVnQ29kZUVuZC50ZXN0KGxpbmVzW2pdKSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihqPT09bGluZXMubGVuZ3RoIHx8ICFyZWdBZG1vbml0aW9uQmxvY2tCZWdpbi50ZXN0KGxpbmVzW2luZGV4XSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGogPSBqPT09bGluZXMubGVuZ3RoP2otMTpqO1xyXG4gICAgICAgICAgICAgICAgcmV0QXJyYXkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogTGluZVR5cGUuY29kZSxcclxuICAgICAgICAgICAgICAgICAgICBiZWdpbjppbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6aisxXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBcdTVCRjlBZG1pbml0aW9uQm9sY2tcdTUwNUFcdTcyNzlcdTZCOEFcdTU5MDRcdTc0MDZcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXRBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBMaW5lVHlwZS5jb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDppbmRleCsxXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldEFycmF5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IExpbmVUeXBlLnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46aW5kZXgrMSxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6alxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXRBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBMaW5lVHlwZS5jb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOmosXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOmorMVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5kZXggPSBqKzE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYocmVnRm9ybXVsYUJlZ2luLnRlc3QobGluZXNbaW5kZXhdKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCByZWdGb3JtdWxhT25lTGluZSA9IC8oPzwhXFxcXClcXCRcXCQoPyEgKVteXSo/KD88ISApKD88IVxcXFwpXFwkXFwkL2c7XHJcbiAgICAgICAgICAgIGlmKHJlZ0Zvcm11bGFPbmVMaW5lLnRlc3QobGluZXNbaW5kZXhdKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0QXJyYXkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogTGluZVR5cGUuZm9ybXVsYSxcclxuICAgICAgICAgICAgICAgICAgICBiZWdpbjogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBpbmRleCsxXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGluZGV4ICs9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIGxldCBqID0gaW5kZXgrMTtcclxuICAgICAgICAgICAgICAgIHdoaWxlKGo8bGluZXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlZ0Zvcm11bGFFbmQudGVzdChsaW5lc1tqXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGorKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGogPSBqPT09bGluZXMubGVuZ3RoP2otMTpqO1xyXG4gICAgICAgICAgICAgICAgcmV0QXJyYXkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogTGluZVR5cGUuZm9ybXVsYSxcclxuICAgICAgICAgICAgICAgICAgICBiZWdpbjppbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6aisxXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gaisxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBqID0gaW5kZXgrMTtcclxuICAgICAgICAgICAgZm9yKDtqPGxpbmVzLmxlbmd0aDtqKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHJlZ0NvZGVCZWdpbi50ZXN0KGxpbmVzW2pdKSB8fCByZWdGb3JtdWxhQmVnaW4udGVzdChsaW5lc1tqXSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0QXJyYXkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBMaW5lVHlwZS50ZXh0LFxyXG4gICAgICAgICAgICAgICAgYmVnaW46IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgZW5kOmpcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGluZGV4ID0gajtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJldEFycmF5O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVwYXJzZUFydGljbGVQYXJ0cyhhcnRpY2xlOiBzdHJpbmcsIHByZXZBcnRpY2xlUGFydDpBcnRpY2xlUGFydFtdfG51bGwsIHVwZGF0ZUxpbmVTdGFydDogbnVtYmVyLCBwcmludDpib29sZWFuPWZhbHNlKTogQXJ0aWNsZVBhcnRbXVxyXG57XHJcbiAgICBpZihwcmV2QXJ0aWNsZVBhcnQgPT09IG51bGwgfHwgdXBkYXRlTGluZVN0YXJ0PT09MClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gc3BsaXRBcnRpY2xlKGFydGljbGUpO1xyXG4gICAgfVxyXG4gICAgbGV0IGxpbmVzID0gYXJ0aWNsZS5zcGxpdCgnXFxuJyk7XHJcbiAgICBsZXQgcmVzOiBBcnRpY2xlUGFydFtdID0gW107XHJcbiAgICBsZXQgbmV3QmVnaW5JbmRleCA9IDA7XHJcbiAgICBsZXQgY2hhbmdlQXJ0aWNsZVBhcnRJbmRleCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDtpPHByZXZBcnRpY2xlUGFydC5sZW5ndGg7aSsrKVxyXG4gICAge1xyXG4gICAgICAgIGlmKHVwZGF0ZUxpbmVTdGFydD49cHJldkFydGljbGVQYXJ0W2ldLmJlZ2luICYmIHVwZGF0ZUxpbmVTdGFydDxwcmV2QXJ0aWNsZVBhcnRbaV0uZW5kKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmV3QmVnaW5JbmRleCA9IHByZXZBcnRpY2xlUGFydFtpXS5iZWdpbjtcclxuICAgICAgICAgICAgY2hhbmdlQXJ0aWNsZVBhcnRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICByZXMucHVzaChwcmV2QXJ0aWNsZVBhcnRbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTY2MkZBZG1vbml0aW9uXHU3Njg0XHU3RjE2XHU4RjkxXHU1NzU3XHJcbiAgICBsZXQgcmVnQWRtb25pdGlvbkJsb2NrQmVnaW4gPSAvYGBgYWQtXFx3Ky9nO1xyXG4gICAgaWYoIHByZXZBcnRpY2xlUGFydFtjaGFuZ2VBcnRpY2xlUGFydEluZGV4XS50eXBlID09PSBMaW5lVHlwZS50ZXh0ICYmIG5ld0JlZ2luSW5kZXghPTAgJiYgcmVnQWRtb25pdGlvbkJsb2NrQmVnaW4udGVzdChsaW5lc1tuZXdCZWdpbkluZGV4LTFdKSlcclxuICAgIHtcclxuICAgICAgICBjaGFuZ2VBcnRpY2xlUGFydEluZGV4IC09IDE7XHJcbiAgICAgICAgcmVzLnBvcCgpO1xyXG4gICAgfVxyXG4gICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGQWRtb25pdGlvblx1NzY4NFx1NEUwQlx1NjVCOWBgYFx1NTc1N1x1OTBFOFx1NTIwNlxyXG4gICAgZWxzZSBpZihwcmV2QXJ0aWNsZVBhcnRbY2hhbmdlQXJ0aWNsZVBhcnRJbmRleF0uYmVnaW4gPT09IHByZXZBcnRpY2xlUGFydFtjaGFuZ2VBcnRpY2xlUGFydEluZGV4XS5lbmQtMSAmJiBcclxuICAgICAgICBjaGFuZ2VBcnRpY2xlUGFydEluZGV4Pj0yICYmIHJlZ0FkbW9uaXRpb25CbG9ja0JlZ2luLnRlc3QobGluZXNbcHJldkFydGljbGVQYXJ0W2NoYW5nZUFydGljbGVQYXJ0SW5kZXgtMl0uZW5kLTFdKSlcclxuICAgIHtcclxuICAgICAgICBjaGFuZ2VBcnRpY2xlUGFydEluZGV4IC09IDI7XHJcbiAgICAgICAgcmVzLnBvcCgpO1xyXG4gICAgICAgIHJlcy5wb3AoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZihjaGFuZ2VBcnRpY2xlUGFydEluZGV4PT09MClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gc3BsaXRBcnRpY2xlKGFydGljbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIG5ld0JlZ2luSW5kZXggPSBwcmV2QXJ0aWNsZVBhcnRbY2hhbmdlQXJ0aWNsZVBhcnRJbmRleF0uYmVnaW47XHJcbiAgICBsZXQgbmV3UGFydHMgPSBzcGxpdEFydGljbGUoYXJ0aWNsZSwgZmFsc2UsIG5ld0JlZ2luSW5kZXgpO1xyXG4gICAgZm9yKGxldCBqPTA7ajxuZXdQYXJ0cy5sZW5ndGg7aisrKVxyXG4gICAge1xyXG4gICAgICAgIHJlcy5wdXNoKG5ld1BhcnRzW2pdKTtcclxuICAgIH1cclxuICAgIGlmKHByaW50KSBuZXcgTm90aWNlKFwiUmVwYXJzZSBBcnRpY2xlOiBiZWdpbiBsaW5lIGluZGV4IFwiK25ld0JlZ2luSW5kZXgudG9TdHJpbmcoKSk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGluZVR5cGVGcm9tQXJ0aWNsZVBhcnRzKGxpbmU6IG51bWJlciwgdHlwZUFycmF5OiBBcnRpY2xlUGFydFtdKTpMaW5lVHlwZVxyXG57XHJcbiAgICBmb3IobGV0IGk9MDtpPHR5cGVBcnJheS5sZW5ndGg7aSsrKVxyXG4gICAge1xyXG4gICAgICAgIGlmKGxpbmUgPj0gdHlwZUFycmF5W2ldLmJlZ2luICYmIGxpbmU8dHlwZUFycmF5W2ldLmVuZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlQXJyYXlbaV0udHlwZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdEZWxldGVBdChzdHI6IHN0cmluZywgaW5kZXg6IG51bWJlcik6c3RyaW5nXHJcbntcclxuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDAsIGluZGV4KStzdHIuc3Vic3RyaW5nKGluZGV4KzEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nSW5zZXJ0QXQoc3RyOnN0cmluZywgaW5kZXg6IG51bWJlciwgczogc3RyaW5nKTpzdHJpbmdcclxue1xyXG4gICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMCwgaW5kZXgpK3Mrc3RyLnN1YnN0cmluZyhpbmRleCk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogXHU1MjA2XHU1MjcyXHU0RTAwXHU4ODRDXHU2NTg3XHU2NzJDXHVGRjBDXHU1Rjk3XHU1MjMwXHU0RTBEXHU1NDBDXHU1MzNBXHU1N0RGXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRMaW5lKGxpbmU6IHN0cmluZywgcmVnRXhwcz86c3RyaW5nKTogSW5saW5lUGFydFtdXHJcbntcclxuICAgIGxldCByZWdJbmxpbmVNYXJrID0gLyg/PCFcXFxcKVxcJHwoPzwhXFxcXClcXGAvZztcclxuICAgIGxldCByZWdGb3JtdWxhSW5saW5lID0gLyg/PCFcXFxcKVxcJCg/ISApW15dKz8oPzwhICkoPzwhXFxcXClcXCQvZztcclxuICAgIGxldCByZWdGb3JtdWxhQmxvY2sgPSAvKD88IVxcXFwpXFwkXFwkKD8hIClbXl0qPyg/PCEgKSg/PCFcXFxcKVxcJFxcJC9nO1xyXG4gICAgbGV0IHJlZ0NvZGUgPSAvKD88IVxcXFwpYFteXSo/KD88IVxcXFwpYC9nO1xyXG4gICAgbGV0IG1hcmtRdWV1ZTpSZWdFeHBFeGVjQXJyYXlbXSA9IFtdO1xyXG4gICAgbGV0IGFycmF5T2ZJbmxpbmVUZXh0Q29kZUZvcm11bGE6IElubGluZVBhcnRbXSA9IFtdO1xyXG5cclxuICAgIHdoaWxlKHRydWUpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IG1hdGNoID0gcmVnSW5saW5lTWFyay5leGVjKGxpbmUpO1xyXG4gICAgICAgIGlmKCFtYXRjaCkgYnJlYWs7XHJcbiAgICAgICAgbWFya1F1ZXVlLnB1c2gobWF0Y2gpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0ZXh0QmVnaW5JbmRleCA9IDA7XHJcbiAgICB3aGlsZShtYXJrUXVldWUubGVuZ3RoIT0wKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBtYXJrID0gbWFya1F1ZXVlLnNoaWZ0KCk7XHJcbiAgICAgICAgaWYobWFyay5pbmRleDx0ZXh0QmVnaW5JbmRleCkgY29udGludWU7XHJcblxyXG4gICAgICAgIGlmKG1hcmtbMF09PT0nJCcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2hGb3JtdWxhQmVnaW5JbmRleDpudW1iZXI7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaEZvcm11bGFMYXN0SW5kZXg6bnVtYmVyO1xyXG4gICAgICAgICAgICByZWdGb3JtdWxhQmxvY2subGFzdEluZGV4ID0gbWFyay5pbmRleDtcclxuICAgICAgICAgICAgbGV0IG1hdGNoQmxvY2tGb3JtdWxhID0gcmVnRm9ybXVsYUJsb2NrLmV4ZWMobGluZSk7XHJcbiAgICAgICAgICAgIGlmKG1hdGNoQmxvY2tGb3JtdWxhICYmIG1hdGNoQmxvY2tGb3JtdWxhLmluZGV4PT09bWFyay5pbmRleClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hGb3JtdWxhQmVnaW5JbmRleCA9IG1hdGNoQmxvY2tGb3JtdWxhLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hGb3JtdWxhTGFzdEluZGV4ID0gcmVnRm9ybXVsYUJsb2NrLmxhc3RJbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJlZ0Zvcm11bGFJbmxpbmUubGFzdEluZGV4ID0gbWFyay5pbmRleDtcclxuICAgICAgICAgICAgICAgIGxldCBtYXRjaElubGluZUZvcm11bGEgPSByZWdGb3JtdWxhSW5saW5lLmV4ZWMobGluZSk7XHJcbiAgICAgICAgICAgICAgICBpZihtYXRjaElubGluZUZvcm11bGEgJiYgbWF0Y2hJbmxpbmVGb3JtdWxhLmluZGV4PT09bWFyay5pbmRleClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaEZvcm11bGFCZWdpbkluZGV4ID0gbWF0Y2hJbmxpbmVGb3JtdWxhLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoRm9ybXVsYUxhc3RJbmRleCA9IHJlZ0Zvcm11bGFJbmxpbmUubGFzdEluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2Q0ExXHU1MzM5XHU5MTREXHU1MjMwXHVGRjBDXHU1MjE5IGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKG1hcmsuaW5kZXg+dGV4dEJlZ2luSW5kZXgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFycmF5T2ZJbmxpbmVUZXh0Q29kZUZvcm11bGEucHVzaChcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGxpbmUuc3Vic3RyaW5nKHRleHRCZWdpbkluZGV4LCBtYXJrLmluZGV4KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogSW5saW5lVHlwZS50ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogdGV4dEJlZ2luSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbWFyay5pbmRleFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFycmF5T2ZJbmxpbmVUZXh0Q29kZUZvcm11bGEucHVzaChcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBsaW5lLnN1YnN0cmluZyhtYXRjaEZvcm11bGFCZWdpbkluZGV4LCBtYXRjaEZvcm11bGFMYXN0SW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6SW5saW5lVHlwZS5mb3JtdWxhLFxyXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOm1hdGNoRm9ybXVsYUJlZ2luSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOm1hdGNoRm9ybXVsYUxhc3RJbmRleFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0ZXh0QmVnaW5JbmRleCA9IG1hdGNoRm9ybXVsYUxhc3RJbmRleDtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYobWFya1swXT09PSdgJylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaENvZGVCZWdpbkluZGV4Om51bWJlcjtcclxuICAgICAgICAgICAgbGV0IG1hdGNoQ29kZUxhc3RJbmRleDpudW1iZXI7XHJcbiAgICAgICAgICAgIHJlZ0NvZGUubGFzdEluZGV4ID0gbWFyay5pbmRleDtcclxuICAgICAgICAgICAgbGV0IG1hdGNoSW5saW5lQ29kZSA9IHJlZ0NvZGUuZXhlYyhsaW5lKTtcclxuICAgICAgICAgICAgaWYobWF0Y2hJbmxpbmVDb2RlICYmIG1hdGNoSW5saW5lQ29kZS5pbmRleD09PW1hcmsuaW5kZXgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG1hdGNoQ29kZUJlZ2luSW5kZXggPSBtYXRjaElubGluZUNvZGUuaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBtYXRjaENvZGVMYXN0SW5kZXggPSByZWdDb2RlLmxhc3RJbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihtYXJrLmluZGV4PnRleHRCZWdpbkluZGV4KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5T2ZJbmxpbmVUZXh0Q29kZUZvcm11bGEucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogbGluZS5zdWJzdHJpbmcodGV4dEJlZ2luSW5kZXgsIG1hcmsuaW5kZXgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTpJbmxpbmVUeXBlLnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogdGV4dEJlZ2luSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IG1hcmsuaW5kZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGFycmF5T2ZJbmxpbmVUZXh0Q29kZUZvcm11bGEucHVzaChcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGxpbmUuc3Vic3RyaW5nKG1hdGNoQ29kZUJlZ2luSW5kZXgsIG1hdGNoQ29kZUxhc3RJbmRleCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6SW5saW5lVHlwZS5jb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjptYXRjaENvZGVCZWdpbkluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6bWF0Y2hDb2RlTGFzdEluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRleHRCZWdpbkluZGV4ID0gbWF0Y2hDb2RlTGFzdEluZGV4O1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRleHRCZWdpbkluZGV4IT1saW5lLmxlbmd0aClcclxuICAgIHtcclxuICAgICAgICBhcnJheU9mSW5saW5lVGV4dENvZGVGb3JtdWxhLnB1c2goXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGxpbmUuc3Vic3RyaW5nKHRleHRCZWdpbkluZGV4KSxcclxuICAgICAgICAgICAgICAgIHR5cGU6SW5saW5lVHlwZS50ZXh0LFxyXG4gICAgICAgICAgICAgICAgYmVnaW46dGV4dEJlZ2luSW5kZXgsXHJcbiAgICAgICAgICAgICAgICBlbmQ6bGluZS5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgIH1cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgbGV0IHJldEFycmF5OiBJbmxpbmVQYXJ0W10gPSBbXTtcclxuICAgIGZvcihsZXQgaT0wO2k8YXJyYXlPZklubGluZVRleHRDb2RlRm9ybXVsYS5sZW5ndGg7aSsrKVxyXG4gICAge1xyXG4gICAgICAgIGlmKGFycmF5T2ZJbmxpbmVUZXh0Q29kZUZvcm11bGFbaV0udHlwZSE9SW5saW5lVHlwZS50ZXh0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0QXJyYXkucHVzaChhcnJheU9mSW5saW5lVGV4dENvZGVGb3JtdWxhW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHRlbXBBcnJheTpJbmxpbmVQYXJ0W107XHJcbiAgICAgICAgICAgIGlmKHJlZ0V4cHMpXHJcbiAgICAgICAgICAgICAgICB0ZW1wQXJyYXkgPSBzcGxpdFRleHRXaXRoTGlua0FuZFVzZXJEZWZpbmVkKGFycmF5T2ZJbmxpbmVUZXh0Q29kZUZvcm11bGFbaV0uY29udGVudCwgcmVnRXhwcyk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRlbXBBcnJheSA9IHNwbGl0VGV4dFdpdGhMaW5rQW5kVXNlckRlZmluZWQoYXJyYXlPZklubGluZVRleHRDb2RlRm9ybXVsYVtpXS5jb250ZW50KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRlbXBBcnJheS5mb3JFYWNoKGl0ZW09PntcclxuICAgICAgICAgICAgICAgIGl0ZW0uYmVnaW4gKz0gYXJyYXlPZklubGluZVRleHRDb2RlRm9ybXVsYVtpXS5iZWdpbjtcclxuICAgICAgICAgICAgICAgIGl0ZW0uZW5kICs9IGFycmF5T2ZJbmxpbmVUZXh0Q29kZUZvcm11bGFbaV0uYmVnaW47XHJcbiAgICAgICAgICAgICAgICByZXRBcnJheS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJldEFycmF5O1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXRjaFdpdGhSZWcodGV4dDpzdHJpbmcsIHJlZ0V4cDpSZWdFeHAsIHR5cGU6IElubGluZVR5cGUsIGlubGluZVR5cGVBcnJheTpJbmxpbmVQYXJ0W10sIGNoZWNrQXJyYXk9ZmFsc2UpOklubGluZVBhcnRbXVxyXG57XHJcbiAgICBsZXQgcmV0QXJyYXkgPSBpbmxpbmVUeXBlQXJyYXk7XHJcbiAgICBsZXQgbWF0Y2hBcnJheTpJbmxpbmVQYXJ0W10gPSBbXTtcclxuICAgIHJldEFycmF5ID0gcmV0QXJyYXkuc29ydCgoYSwgYik6bnVtYmVyPT5hLmJlZ2luLWIuYmVnaW4pO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2JlZm9yZS0tLS0tLS0tLS0tXFxuJyxyZXRBcnJheSlcclxuICAgIHdoaWxlKHRydWUpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IG1hdGNoID0gcmVnRXhwLmV4ZWModGV4dCk7IFxyXG4gICAgICAgIGlmKCFtYXRjaCkgYnJlYWs7XHJcbiAgICAgICAgbGV0IHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAvLyBcdTY4QzBcdTY3RTVcdTUxQjJcdTdBODFcclxuICAgICAgICBpZihjaGVja0FycmF5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpPTA7aTxyZXRBcnJheS5sZW5ndGg7aSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZihtYXRjaC5pbmRleDw9cmV0QXJyYXlbaV0uYmVnaW4pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVnRXhwLmxhc3RJbmRleCA8PSByZXRBcnJheVtpXS5iZWdpbilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocmVnRXhwLmxhc3RJbmRleCA8PSByZXRBcnJheVtpXS5lbmQpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihyZWdFeHAubGFzdEluZGV4ID4gcmV0QXJyYXlbaV0uZW5kKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZUNvdW50ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGo9aSsxOyBqPHJldEFycmF5Lmxlbmd0aDtqKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlZ0V4cC5sYXN0SW5kZXg8PXJldEFycmF5W2pdLmJlZ2luKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNvdW50ID0gai1pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocmVnRXhwLmxhc3RJbmRleDxyZXRBcnJheVtqXS5lbmQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldEFycmF5LnNwbGljZShpLCByZW1vdmVDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYobWF0Y2guaW5kZXg+cmV0QXJyYXlbaV0uYmVnaW4gJiYgbWF0Y2guaW5kZXg8cmV0QXJyYXlbaV0uZW5kKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXZhbGlkKSBjb250aW51ZTtcclxuICAgICAgICBtYXRjaEFycmF5LnB1c2goXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG1hdGNoWzBdLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgICAgIGJlZ2luOiBtYXRjaC5pbmRleCxcclxuICAgICAgICAgICAgICAgIGVuZDogcmVnRXhwLmxhc3RJbmRleFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldEFycmF5ID0gcmV0QXJyYXkuY29uY2F0KG1hdGNoQXJyYXkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ0FmdGVyPT09PT09PT09PT1cXG4nLCByZXRBcnJheSk7XHJcbiAgICByZXR1cm4gcmV0QXJyYXk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogXHU1MjA2XHU1MjcyXHU0RTAwXHU4ODRDXHU2NTg3XHU2NzJDXHU0RTJEXHU3Njg0XHU5NEZFXHU2M0E1XHU1NDhDXHU3NTI4XHU2MjM3XHU4MUVBXHU1QjlBXHU0RTQ5XHU3Njg0XHU2QjYzXHU1MjE5XHU5MEU4XHU1MjA2XHVGRjBDXHU1Rjk3XHU1MjMwIElubGluZVBhcnQgXHU3Njg0XHU0RTBEXHU1NDBDXHU1MzNBXHU1N0RGXHJcbiAqL1xyXG5mdW5jdGlvbiBzcGxpdFRleHRXaXRoTGlua0FuZFVzZXJEZWZpbmVkKHRleHQ6IHN0cmluZywgcmVnRXhwcz86c3RyaW5nKTpJbmxpbmVQYXJ0W11cclxue1xyXG4gICAgbGV0IHJldEFycmF5OiBJbmxpbmVQYXJ0W10gPSBbXTtcclxuICAgIGxldCByZWdXaWtpTGluayA9IC9cXCE/XFxbXFxbW15cXFtcXF1dKj9cXF1cXF0vZztcclxuICAgIGxldCByZWdNZExpbmsgPSAvXFwhP1xcW1teXFxbXFxdXSo/XFxdXFwoW15cXHNcXClcXChcXFtcXF1cXHtcXH0nXSpcXCkvZztcclxuICAgIC8vIGxldCByZWdCYXJlTGluayA9IC8oaHR0cHM/fG9ic2lkaWFufHpvdGVybyk6XFwvXFwvW15cXHNcXClcXChcXFtcXF1cXHtcXH0nXSsvZztcclxuICAgIGxldCByZWdCYXJlTGluayA9IC8oaHR0cHM/OlxcL1xcL3xmdHA6XFwvXFwvfG9ic2lkaWFuOlxcL1xcL3x6b3Rlcm86XFwvXFwvfHd3dy4pW15cXHNcdUZGMDhcdUZGMDlcdTMwMEFcdTMwMEJcdTMwMDJcdUZGMENcdUZGMDFcdUZGMUZcdUZGMUJcdUZGMUFcdTIwMUNcdTIwMURcdTIwMThcdTIwMTlcXClcXChcXFtcXF1cXHtcXH0nXSsvZztcclxuXHJcbiAgICAvLyAxLiBcdTUzMzlcdTkxNER3aWtpbGlua1xyXG4gICAgcmV0QXJyYXkgPSBtYXRjaFdpdGhSZWcodGV4dCwgcmVnV2lraUxpbmssIElubGluZVR5cGUubGluaywgcmV0QXJyYXkpO1xyXG4gICAgLy8gMi4gXHU1MzM5XHU5MTREbWRsaW5rXHJcbiAgICByZXRBcnJheSA9IG1hdGNoV2l0aFJlZyh0ZXh0LCByZWdNZExpbmssIElubGluZVR5cGUubGluaywgcmV0QXJyYXkpO1xyXG5cclxuICAgIC8vIDMuIFx1NTMzOVx1OTE0RFx1NzUyOFx1NjIzN1x1ODFFQVx1NUI5QVx1NEU0OVx1NkI2M1x1NTIxOVxyXG4gICAgbGV0IHJlZ0V4cExpc3Q6IFJlZ0V4cFtdID0gW107XHJcbiAgICBpZihyZWdFeHBzKVxyXG4gICAge1xyXG4gICAgICAgIGxldCByZWdzID0gcmVnRXhwcy5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgZm9yKGxldCBpPTA7aTxyZWdzLmxlbmd0aDtpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcmVnTnVsbCA9IC9eXFxzKiQvZztcclxuICAgICAgICAgICAgaWYocmVnTnVsbC50ZXN0KHJlZ3NbaV0pKSBjb250aW51ZTtcclxuICAgICAgICAgICAgbGV0IGlzVmFsaWRSZWcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVnVGVtcCA9IG5ldyBSZWdFeHAocmVnc1tpXSwgJ2cnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoKGVycm9yKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpc1ZhbGlkUmVnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQmFkIFJlZzonLCByZWdzW2ldKTtcclxuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJCYWQgUmVnRXhwOlwiICsgcmVnc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGlzVmFsaWRSZWcpIFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZWdFeHBMaXN0LnB1c2gobmV3IFJlZ0V4cChyZWdzW2ldLCAnZycpKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdHb29kIFJlZzonLCByZWdzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVnTGVuID0gcmVnRXhwTGlzdC5sZW5ndGg7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaT0wO2k8cmVnTGVuO2krKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldEFycmF5ID0gbWF0Y2hXaXRoUmVnKHRleHQsIHJlZ0V4cExpc3RbaV0sIElubGluZVR5cGUudXNlciwgcmV0QXJyYXksIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gNC4gXHU1MzM5XHU5MTREXHU3RUFGXHU5NEZFXHU2M0E1XHJcbiAgICByZXRBcnJheSA9IG1hdGNoV2l0aFJlZyh0ZXh0LCByZWdCYXJlTGluaywgSW5saW5lVHlwZS5saW5rLCByZXRBcnJheSwgdHJ1ZSk7XHJcblxyXG4gICAgLy8gNS4gXHU1Rjk3XHU1MjMwXHU1MjY5XHU0RjU5XHU3Njg0XHU2NTg3XHU2NzJDXHU5MEU4XHU1MjA2XHJcbiAgICByZXRBcnJheSA9IHJldEFycmF5LnNvcnQoKGEsIGIpOm51bWJlcj0+YS5iZWdpbi1iLmJlZ2luKTtcclxuXHJcbiAgICBsZXQgdGV4dEFycmF5IDogSW5saW5lUGFydFtdID0gW107XHJcbiAgICBsZXQgdGV4dEJlZ2luID0gMDtcclxuICAgIGxldCB0ZXh0RW5kID0gMDtcclxuICAgIGZvcihsZXQgaT0wO2k8cmV0QXJyYXkubGVuZ3RoO2krKylcclxuICAgIHtcclxuICAgICAgICBpZih0ZXh0QmVnaW48cmV0QXJyYXlbaV0uYmVnaW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0ZXh0RW5kID0gcmV0QXJyYXlbaV0uYmVnaW47XHJcbiAgICAgICAgICAgIHRleHRBcnJheS5wdXNoKFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRleHQuc3Vic3RyaW5nKHRleHRCZWdpbiwgdGV4dEVuZCksXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogSW5saW5lVHlwZS50ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOiB0ZXh0QmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiB0ZXh0RW5kXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRleHRCZWdpbiA9IHJldEFycmF5W2ldLmVuZDtcclxuICAgIH1cclxuXHJcbiAgICBpZih0ZXh0QmVnaW4hPXRleHQubGVuZ3RoKVxyXG4gICAge1xyXG4gICAgICAgIHRleHRBcnJheS5wdXNoKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiB0ZXh0LnN1YnN0cmluZyh0ZXh0QmVnaW4sIHRleHQubGVuZ3RoKSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IElubGluZVR5cGUudGV4dCxcclxuICAgICAgICAgICAgICAgIGJlZ2luOiB0ZXh0QmVnaW4sXHJcbiAgICAgICAgICAgICAgICBlbmQ6IHRleHQubGVuZ3RoXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDYuIFx1NTQwOFx1NUU3Nlx1NjU4N1x1NjcyQ1x1OTBFOFx1NTIwNlx1NTQ4Q1x1NTE3Nlx1NEVENlx1OTBFOFx1NTIwNlxyXG4gICAgcmV0QXJyYXkgPSByZXRBcnJheS5jb25jYXQodGV4dEFycmF5KTtcclxuICAgIHJldEFycmF5ID0gcmV0QXJyYXkuc29ydCgoYSwgYik6bnVtYmVyPT5hLmJlZ2luLWIuYmVnaW4pO1xyXG4gICAgcmV0dXJuIHJldEFycmF5XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TGluZShsaW5lOiBzdHJpbmcsIGN1ckN1cnNvcjogRWRpdG9yUG9zaXRpb24sIHNldHRpbmdzOiBGb3JtYXRTZXR0aW5ncywgcHJldkN1cnNvcj86IEVkaXRvclBvc2l0aW9uKTpbc3RyaW5nLCBudW1iZXIsIElubGluZUNoYW5nZVtdXXxudWxsXHJcbntcclxuICAgIGxldCBjaCA9IGN1ckN1cnNvci5jaDtcclxuICAgIGlmKGxpbmU9PT0nJykgcmV0dXJuIFsnJywgMCwgW11dO1xyXG5cclxuICAgIC8vIDEuIFx1NTIxMlx1NTIwNlx1NEUwMFx1ODg0Q1x1NjU4N1x1NUI1N1x1NzY4NFx1NTE4NVx1OTBFOFx1NEUwRFx1NTQwQ1x1NkEyMVx1NTc1N1x1NTMzQVx1NTdERlxyXG4gICAgbGV0IGxpbmVQYXJ0czpJbmxpbmVQYXJ0W107XHJcbiAgICBpZihzZXR0aW5ncy5Vc2VyRGVmaW5lZFJlZ1N3aXRjaClcclxuICAgIHtcclxuICAgICAgICBsaW5lUGFydHMgPSBzcGxpdExpbmUobGluZSwgc2V0dGluZ3MuVXNlckRlZmluZWRSZWdFeHApO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIGxpbmVQYXJ0cyA9IHNwbGl0TGluZShsaW5lKTtcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKGxpbmVQYXJ0cyk7XHJcblxyXG4gICAgLy8gXHU1OTA3XHU0RUZEXHU1MzlGXHU2NzY1XHU3Njg0bGluZVBhcnRzLCBcdTZERjFcdTYyRjdcdThEMURcclxuICAgIGxldCBsaW5lUGFydHNPcmlnaW4gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGxpbmVQYXJ0cykpO1xyXG4gICAgbGV0IGlubGluZUNoYW5nZUxpc3Q6SW5saW5lQ2hhbmdlW10gPSBbXTtcclxuICAgIFxyXG4gICAgbGV0IGN1cnNvckxpbmVQYXJ0SW5kZXggPSAtMTtcclxuICAgIGxldCBjdXJzb3JSZWxhdGl2ZUluZGV4ID0gLTE7XHJcbiAgICBsZXQgcmVzdWx0Q3Vyc29yQ2ggPSAwOyAgICAgLy8gXHU4RjkzXHU1MUZBXHU3Njg0XHU1MTQ5XHU2ODA3XHU0RjREXHU3RjZFXHJcblxyXG4gICAgLy8gMi4gXHU2MjdFXHU1MjMwXHU1MTQ5XHU2ODA3XHU2MjQwXHU1NzI4XHU3Njg0XHU5MEU4XHU1MjA2XHVGRjBDXHU1OTgyXHU2NzlDXHU2NjJGIElubGluZVBhcnQudGV4dFx1RkYwQ1x1NTIxOVx1NTcyOFx1NTE0OVx1NjgwN1x1NTkwNFx1NjNEMlx1NTE2NSdcXDAnXHU2NzY1XHU2ODA3XHU4QkIwXHU1MTQ5XHU2ODA3XHU0RjREXHU3RjZFXHJcbiAgICBmb3IobGV0IGk9MDtpPGxpbmVQYXJ0cy5sZW5ndGg7aSsrKVxyXG4gICAge1xyXG4gICAgICAgIGlmKGNoPmxpbmVQYXJ0c1tpXS5iZWdpbiAmJiBjaDw9bGluZVBhcnRzW2ldLmVuZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGN1cnNvckxpbmVQYXJ0SW5kZXggPSBpO1xyXG4gICAgICAgICAgICBjdXJzb3JSZWxhdGl2ZUluZGV4ID0gY2gtbGluZVBhcnRzW2ldLmJlZ2luO1xyXG4gICAgICAgICAgICBpZihsaW5lUGFydHNbaV0udHlwZT09PUlubGluZVR5cGUudGV4dClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGluZVBhcnRzW2ldLmNvbnRlbnQgPSBzdHJpbmdJbnNlcnRBdChsaW5lUGFydHNbaV0uY29udGVudCwgY3Vyc29yUmVsYXRpdmVJbmRleCwgJ1xcMCcpOyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlc3VsdExpbmUgPSAnJztcclxuICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgLy8gXHU0RkREXHU1QjU4XHU1MjREXHU0RTAwXHU5MEU4XHU1MjA2XHU3Njg0XHU1MzNBXHU1NzU3XHU3QzdCXHU1NzhCXHVGRjBDSW5saW5lVHlwZS5ub25lIFx1NEVFM1x1ODg2OFx1NEUwMFx1ODg0Q1x1NzY4NFx1NUYwMFx1NTlDQlxyXG4gICAgbGV0IHByZXZQYXJ0VHlwZTpzdHJpbmcgPSBJbmxpbmVUeXBlLm5vbmU7XHJcbiAgICBsZXQgcHJldlRleHRFbmRXaXRoU3BhY2UgPSBmYWxzZTtcclxuXHJcbiAgICAvLyAzLiBcdTkwNERcdTUzODZcdTZCQ0ZcdTRFMkFcdTg4NENcdTkwRThcdTUyMDZcdUZGMENcdThGREJcdTg4NENcdTY4M0NcdTVGMEZcdTUzMTZcdTU5MDRcdTc0MDZcclxuICAgIGZvcihsZXQgaT0wO2k8bGluZVBhcnRzLmxlbmd0aDtpKyspXHJcbiAgICB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coaW5saW5lTGlzdFtpXSk7XHJcblxyXG4gICAgICAgIC8vIDMuMSBcdTU5ODJcdTY3OUNcdTg4NENcdTUxODVcdTdCMkNcdTRFMDBcdTkwRThcdTUyMDZcdTRFM0FcdTY1ODdcdTY3MkNcdUZGMENcdTUyMTlcdTU5MDRcdTc0MDZcdTUzRTVcdTk5OTZcdTVCNTdcdTZCQ0RcdTU5MjdcdTUxOTlcdTc2ODRcdTkwRThcdTUyMDZcclxuICAgICAgICBpZihpPT09MCAmJiBsaW5lUGFydHNbaV0udHlwZT09PUlubGluZVR5cGUudGV4dCAmJiBzZXR0aW5ncy5DYXBpdGFsaXphdGlvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIDMuMS4xIFx1NTk4Mlx1Njc5QyBwcmV2Q3Vyc29yIFx1NEUxNFx1NTE0OVx1NjgwN1x1NEUwRFx1NTcyOFx1NkI2NFx1OTBFOFx1NTIwNlx1RkYwQ1x1NTIxOVx1OERGM1x1OEZDN1xyXG4gICAgICAgICAgICBpZihwcmV2Q3Vyc29yICYmIGN1cnNvckxpbmVQYXJ0SW5kZXghPTApe31cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVnRmlyc3RTZW50ZW5jZSA9IC9eXFxzKihcXC0gKFxcW1t4IF1cXF0gKT8pP1thLXpdL2c7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVnSGVhZGVyU2VudGVuY2UgPSAvXigjKyB8PisgPylbYS16XS9nO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRleHRjb3B5ID0gbGluZVBhcnRzWzBdLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2ggPSByZWdGaXJzdFNlbnRlbmNlLmV4ZWModGV4dGNvcHkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoSGVhZGVyID0gcmVnSGVhZGVyU2VudGVuY2UuZXhlYyh0ZXh0Y29weSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZHN0Q2hhckluZGV4ID0gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYobWF0Y2gpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0Q2hhckluZGV4ID0gcmVnRmlyc3RTZW50ZW5jZS5sYXN0SW5kZXgtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYobWF0Y2hIZWFkZXIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0Q2hhckluZGV4ID0gcmVnSGVhZGVyU2VudGVuY2UubGFzdEluZGV4LTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIXByZXZDdXJzb3Ipe31cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYocHJldkN1cnNvci5saW5lPT09Y3VyQ3Vyc29yLmxpbmUgJiYgZHN0Q2hhckluZGV4Pj1wcmV2Q3Vyc29yLmNoICYmIGRzdENoYXJJbmRleDxjdXJDdXJzb3IuY2gpe31cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgZHN0Q2hhckluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoZHN0Q2hhckluZGV4ICE9IC0xKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1swXS5jb250ZW50ID0gdGV4dGNvcHkuc3Vic3RyaW5nKDAsIGRzdENoYXJJbmRleCkrdGV4dGNvcHkuY2hhckF0KGRzdENoYXJJbmRleCkudG9VcHBlckNhc2UoKSt0ZXh0Y29weS5zdWJzdHJpbmcoZHN0Q2hhckluZGV4KzEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gMy4yIFx1NTIwNlx1NTIyQlx1NTkwNFx1NzQwNlx1NkJDRlx1NzlDRFx1NTMzQVx1NTc1N1x1NjBDNVx1NTFCNVxyXG4gICAgICAgIHN3aXRjaChsaW5lUGFydHNbaV0udHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIDMuMi4xIFx1NTkwNFx1NzQwNlx1NjU4N1x1NjcyQ1x1NTMzQVx1NTc1N1xyXG4gICAgICAgICAgICBjYXNlIElubGluZVR5cGUudGV4dDpcclxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gbGluZVBhcnRzW2ldLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQmVmb3JlJywgaSwgbGluZVBhcnRzW2ldLmNvbnRlbnQpXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVGV4dC40IFx1NTkwNFx1NzQwNlx1NTNFNVx1OTk5Nlx1NUI1N1x1NkJDRFx1NTkyN1x1NTE5OVxyXG4gICAgICAgICAgICAgICAgaWYoc2V0dGluZ3MuQ2FwaXRhbGl6YXRpb24pXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIHJlZyA9IC9bXFwuXFw/XFwhXHUzMDAyXHVGRjAxXHVGRjFGXShbXFxzXSopW2Etel0vZztcclxuXHRcdFx0XHRcdHdoaWxlKHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2ggPSByZWcuZXhlYyhjb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIW1hdGNoKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBJbmRleCA9IHJlZy5sYXN0SW5kZXgtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY3Vyc29yTGluZVBhcnRJbmRleClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocHJldkN1cnNvciwgY3VyQ3Vyc29yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGVtcEluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXByZXZDdXJzb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1tpXS5jb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoMCwgdGVtcEluZGV4KSArIGNvbnRlbnQuY2hhckF0KHRlbXBJbmRleCkudG9VcHBlckNhc2UoKSArIGNvbnRlbnQuc3Vic3RyaW5nKHJlZy5sYXN0SW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGxpbmVQYXJ0c1tpXS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocHJldkN1cnNvciAmJiBjdXJzb3JMaW5lUGFydEluZGV4PT09aSAmJiBwcmV2Q3Vyc29yLmxpbmU9PT1jdXJDdXJzb3IubGluZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGVtcEluZGV4Pj1wcmV2Q3Vyc29yLmNoLW9mZnNldCAmJiB0ZW1wSW5kZXg8Y3VyQ3Vyc29yLmNoLW9mZnNldClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lUGFydHNbaV0uY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIHRlbXBJbmRleCkgKyBjb250ZW50LmNoYXJBdCh0ZW1wSW5kZXgpLnRvVXBwZXJDYXNlKCkgKyBjb250ZW50LnN1YnN0cmluZyhyZWcubGFzdEluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gbGluZVBhcnRzW2ldLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVGV4dC4xIFx1NTkwNFx1NzQwNlx1NEUyRFx1ODJGMVx1NjU4N1x1NEU0Qlx1OTVGNFx1N0E3QVx1NjgzQ1xyXG4gICAgICAgICAgICAgICAgaWYoc2V0dGluZ3MuQ2hpbmVzZUVuZ2xpc2hTcGFjZSl7XHJcblx0XHRcdFx0XHRsZXQgcmVnMT0vKFtBLVphLXowLTksXFwuO1xcPzohXSkoW1xcdTRlMDAtXFx1OWZhNV0rKS9naTtcclxuXHRcdFx0XHRcdGxldCByZWcyPS8oW1xcdTRlMDAtXFx1OWZhNV0rKShbQS1aYS16MC05XSkvZ2k7XHJcblx0XHRcdFx0XHRsaW5lUGFydHNbaV0uY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShyZWcxLCBcIiQxICQyXCIpLnJlcGxhY2UocmVnMiwgXCIkMSAkMlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gbGluZVBhcnRzW2ldLmNvbnRlbnQ7XHJcblx0XHRcdFx0fVxyXG4gICAgICAgICAgICAgICAgLy8gVGV4dC4yIFx1NTkwNFx1NzQwNlx1NEUyRFx1NjU4N1x1OTVGNFx1NjVFMFx1N0E3QVx1NjgzQ1xyXG4gICAgICAgICAgICAgICAgaWYoc2V0dGluZ3MuQ2hpbmVzZU5vU3BhY2UpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0bGV0IHJlZz0vKFtcXHU0ZTAwLVxcdTlmYTVcdUZGMENcdTMwMDJcdTMwMDFcdUZGMUJcdTIwMThcdTIwMTlcdTMwMEFcdTMwMEJdKykoXFxzKykoW1xcdTRlMDAtXFx1OWZhNVx1RkYwQ1x1MzAwMlx1MzAwMVx1RkYxQlx1MjAxOFx1MjAxOVx1MzAwQVx1MzAwQl0rKS9nO1xyXG5cdFx0XHRcdFx0d2hpbGUocmVnLmV4ZWMoY29udGVudCkpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGxpbmVQYXJ0c1tpXS5jb250ZW50ID0gY29udGVudC5yZXBsYWNlKHJlZywgXCIkMSQzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gbGluZVBhcnRzW2ldLmNvbnRlbnQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHNldHRpbmdzLlB1bmN0dWF0aW9uU3BhY2UpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGV4dC4zIFx1NTkwNFx1NzQwNlx1ODJGMVx1NjU4N1x1NUI1N1x1NkJDRFx1NEUwRVx1NjgwN1x1NzBCOVx1OTVGNFx1N0E3QVx1NjgzQ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmKHNldHRpbmdzLkVuZ2xpc2hTcGFjZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWcgPSAvKFssXFwuO1xcP1xcIV0pKFtBLVphLXpdKS9naTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUodHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gcmVnLmV4ZWMoY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighbWF0Y2gpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBJbmRleCA9IHJlZy5sYXN0SW5kZXgtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFwcmV2Q3Vyc29yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZygwLCB0ZW1wSW5kZXgpICsgXCIgXCIgKyBjb250ZW50LnN1YnN0cmluZyh0ZW1wSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihwcmV2Q3Vyc29yICYmIGN1cnNvckxpbmVQYXJ0SW5kZXg9PT1pICYmIHByZXZDdXJzb3IubGluZT09PWN1ckN1cnNvci5saW5lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRlbXBJbmRleD49cHJldkN1cnNvci5jaC1vZmZzZXQgJiYgdGVtcEluZGV4PGN1ckN1cnNvci5jaC1vZmZzZXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoMCwgdGVtcEluZGV4KSArIFwiIFwiICsgY29udGVudC5zdWJzdHJpbmcodGVtcEluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx1NTM1NVx1NzJFQ1x1NTkwNFx1NzQwNlx1NTE5Mlx1NTNGN1x1NTQwRVx1NjU4N1x1NjcyQ1x1NzY4NFx1ODFFQVx1NTJBOFx1N0E3QVx1NjgzQ1x1RkYwQ1x1NEUzQVx1NEU4Nlx1NTE3Q1x1NUJCOSA6ZW1vamk6IFx1NjgzQ1x1NUYwRlx1NzY4NFx1OEY5M1x1NTE2NVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnMiA9IC8oOikoW0EtWmEtejAtOV9dK1sgLFxcLlxcP1xcXFxcXC87J1wiXHVGRjBDXHUzMDAyXHVGRjFGXHVGRjFCXHUyMDE4XHUyMDFDXHUyMDFEXHUyMDE5XHUzMDAxXFxbXFxdXFwtXFx7XFx9XSkvZ2k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1tpXS5jb250ZW50ID0gY29udGVudC5yZXBsYWNlKHJlZzIsIFwiJDEgJDJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbmVQYXJ0c1tpXS5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGxpbmVQYXJ0c1tpXS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGV4dC41IFx1NTkwNFx1NzQwNlx1ODJGMVx1NjU4N1x1NjJFQ1x1NTNGN1x1NEUwRVx1NTkxNlx1OTBFOFx1NjU4N1x1NjcyQ1x1N0E3QVx1NjgzQ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmKHNldHRpbmdzLkJyYWNlU3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnMSA9IC8oXFwpKShbQS1aYS16MC05XFx1NGUwMC1cXHU5ZmE1XSspL2dpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnMiA9IC8oW0EtWmEtejAtOVxcdTRlMDAtXFx1OWZhNTosXFwuXFw/XFwhJ1wiXSspKFxcKCkvZ2k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1tpXS5jb250ZW50ID0gY29udGVudC5yZXBsYWNlKHJlZzEsIFwiJDEgJDJcIikucmVwbGFjZShyZWcyLCBcIiQxICQyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gbGluZVBhcnRzW2ldLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUZXh0LjYgXHU1OTA0XHU3NDA2XHU2NTcwXHU1QjU3XHU0RTBFXHU2ODA3XHU3MEI5XHU3Njg0XHU3QTdBXHU2ODNDXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYoc2V0dGluZ3MuTnVtYmVyU3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnMSA9IC8oWyw7XFw/XFwhXFxdXFx9XSkoWzAtOV0pL2c7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWcyID0gLyhbMC05XSkoW1xcW1xce10pL2c7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1tpXS5jb250ZW50ID0gY29udGVudC5yZXBsYWNlKHJlZzEsIFwiJDEgJDJcIikucmVwbGFjZShyZWcyLCBcIiQxICQyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gbGluZVBhcnRzW2ldLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVGV4dC43IFx1NUY5N1x1NTIzMFx1NjU4N1x1NjcyQ1x1OTBFOFx1NTIwNlx1NjYyRlx1NTQyNlx1NEVFNVx1N0E3QVx1NzY3RFx1N0IyNlx1NUYwMFx1NTlDQlx1NjIxNlx1N0VEM1x1Njc1Rlx1RkYwQ1x1NzUyOFx1Njc2NVx1NTIyNFx1NjVBRFx1NTQwRVx1N0VFRFx1NjU4N1x1NjcyQ1x1NTI0RFx1NTQwRVx1NjYyRlx1NTQyNlx1OTcwMFx1ODk4MVx1NkRGQlx1NTJBMFx1N0E3QVx1NjgzQ1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlZ1N0YXJ0V2l0aFNwYWNlID0gL15cXDA/W1xccyxcXC47XFw/XFwhXHVGRjBDXHUzMDAyXHVGRjFCXHVGRjFGXHVGRjAxXHUzMDAxXHVGRjA4XHVGRjA5XFxdXFwpXFx9XS87XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVnRW5kV2l0aFNwYWNlID0gL1tcXHNcdUZGMENcdTMwMDJcdTMwMDFcdUZGMUFcdUZGMUJcdUZGMUZcdUZGMDFcdUZGMDhcdUZGMDlcXFtcXChcXHtdXFwwPyQvO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRleHRTdGFydFdpdGhTcGFjZSA9IHJlZ1N0YXJ0V2l0aFNwYWNlLnRlc3QoY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGV4dEVuZFdpdGhTcGFjZSA9IHJlZ0VuZFdpdGhTcGFjZS50ZXN0KGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGksIGxpbmVQYXJ0c1tpXS5jb250ZW50LCAnOyAhc3RhcnR3aXRoc3BhY2U6JywhdGV4dFN0YXJ0V2l0aFNwYWNlKVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRleHQuOCBcdTY4MzlcdTYzNkVcdTUyNERcdTRFMDBcdTkwRThcdTUyMDZcdTc2ODRcdTUzM0FcdTU3NTdcdTdDN0JcdTU3OEJcdTU5MDRcdTc0MDZcdTdBN0FcdTY4M0NcdTZERkJcdTUyQTBcdTc2ODRcdTk1RUVcdTk4OThcclxuICAgICAgICAgICAgICAgIHN3aXRjaChwcmV2UGFydFR5cGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLm5vbmU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5jb2RlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5JbmxpbmVDb2RlU3BhY2UgJiYgIXRleHRTdGFydFdpdGhTcGFjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVBhcnRzW2ldLmNvbnRlbnQgPSAnICcrY29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBsaW5lUGFydHNbaV0uY29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElubGluZVR5cGUuZm9ybXVsYTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2V0dGluZ3MuSW5saW5lRm9ybXVsYVNwYWNlICYmICF0ZXh0U3RhcnRXaXRoU3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1tpXS5jb250ZW50ID0gJyAnK2NvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gbGluZVBhcnRzW2ldLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLmxpbms6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGxpbmVQYXJ0c1tpXS5jb250ZW50LmNoYXJBdCgwKT09PScgJykgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdCYXJlTGluayA9IC9eKGh0dHBzPzpcXC9cXC98ZnRwOlxcL1xcL3xvYnNpZGlhbjpcXC9cXC98em90ZXJvOlxcL1xcL3x3d3cuKVteXFxzXHVGRjA4XHVGRjA5XHUzMDBBXHUzMDBCXHUzMDAyLDs6XHVGRjBDXHVGRjAxXHVGRjFGXHVGRjFCXHVGRjFBXHUyMDFDXHUyMDFEXHUyMDE4XHUyMDE5XFwpXFwoXFxbXFxdXFx7XFx9J10rL2c7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpc0JhcmVMaW5rID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQmFyZUxpbmsgPSByZWdCYXJlTGluay50ZXN0KGxpbmVQYXJ0c1tpLTFdLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYmFyZWxpbmsnLCBpc0JhcmVMaW5rKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihpc0JhcmVMaW5rKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lUGFydHNbaV0uY29udGVudCA9ICcgJytjb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGxpbmVQYXJ0c1tpXS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNldHRpbmdzLkxpbmtTbWFydFNwYWNlICYmICF0ZXh0U3RhcnRXaXRoU3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdUZXN0V2lraUxpbmsgPSAvXFwhP1xcW1xcW1teXFxbXFxdXSo/XFxdXFxdLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdNZExpbmsgPSAvXFwhP1xcW1teXFxbXFxdXSo/XFxdXFwoW15cXHNcXClcXChcXFtcXF1cXHtcXH0nXSpcXCkvZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdOb05lZWRTcGFjZSA9IC9bXFx1NGUwMC1cXHU5ZmE1XVtcXHU0ZTAwLVxcdTlmYTVdL2c7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR3b05laWdoYm9yQ2hhcnMgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGFyQXRUZXh0QmVnaW4gPSBsaW5lUGFydHNbaV0uY29udGVudC5jaGFyQXQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hhckF0TGlua0VuZDpzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmtXaXRoTm9UZXh0ID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVnVGVzdFdpa2lMaW5rLnRlc3QobGluZVBhcnRzW2ktMV0uY29udGVudCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhckF0TGlua0VuZCA9IGxpbmVQYXJ0c1tpLTFdLmNvbnRlbnQuY2hhckF0KGxpbmVQYXJ0c1tpLTFdLmNvbnRlbnQubGVuZ3RoLTMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNoYXJBdExpbmtFbmQ9PT0nWycpIGxpbmtXaXRoTm9UZXh0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYocmVnTWRMaW5rLnRlc3QobGluZVBhcnRzW2ktMV0uY29udGVudCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlZ01kTGlua0VuZCA9IC9cXF0vO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGFyQXRMaW5rRW5kSW5kZXg9bGluZVBhcnRzW2ktMV0uY29udGVudC5zZWFyY2gocmVnTWRMaW5rRW5kKS0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJBdExpbmtFbmQgPSBsaW5lUGFydHNbaS0xXS5jb250ZW50LmNoYXJBdChjaGFyQXRMaW5rRW5kSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNoYXJBdExpbmtFbmQ9PT0nWycpIGxpbmtXaXRoTm9UZXh0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0d29OZWlnaGJvckNoYXJzID0gY2hhckF0TGlua0VuZCtjaGFyQXRUZXh0QmVnaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggIWxpbmtXaXRoTm9UZXh0ICYmICFyZWdOb05lZWRTcGFjZS50ZXN0KHR3b05laWdoYm9yQ2hhcnMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1tpXS5jb250ZW50ID0gJyAnK2NvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGxpbmVQYXJ0c1tpXS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoIXNldHRpbmdzLkxpbmtTbWFydFNwYWNlICYmIHNldHRpbmdzLkxpbmtTcGFjZSAmJiAhdGV4dFN0YXJ0V2l0aFNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lUGFydHNbaV0uY29udGVudCA9ICcgJytjb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGxpbmVQYXJ0c1tpXS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS51c2VyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5Vc2VyUGFydFNwYWNlICYmICF0ZXh0U3RhcnRXaXRoU3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1tpXS5jb250ZW50ID0gJyAnK2NvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gbGluZVBhcnRzW2ldLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVGV4dC45IFx1NTk4Mlx1Njc5Q1x1NTE0OVx1NjgwN1x1NTcyOFx1OEJFNVx1NTMzQVx1NTc1N1x1RkYwQ1x1NTIxOVx1OEJBMVx1N0I5N1x1NjcwMFx1N0VDOFx1NTE0OVx1NjgwN1x1NzY4NFx1NEY0RFx1N0Y2RVxyXG4gICAgICAgICAgICAgICAgaWYoaSA9PT0gY3Vyc29yTGluZVBhcnRJbmRleClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVnID0gJ1xcMCc7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBjb250ZW50LnNlYXJjaChyZWcpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q3Vyc29yQ2ggPSBvZmZzZXQgKyBuO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTIyMFx1OTY2NCBcXDBcclxuICAgICAgICAgICAgICAgICAgICBsaW5lUGFydHNbaV0uY29udGVudCA9IHN0cmluZ0RlbGV0ZUF0KGNvbnRlbnQsIG4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0FmdGVyJywgaSwgbGluZVBhcnRzW2ldLmNvbnRlbnQpXHJcbiAgICAgICAgICAgICAgICAvLyBUZXh0LjEwIFx1NTNEOFx1OTFDRlx1NjZGNFx1NjVCMFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGluZSArPSBsaW5lUGFydHNbaV0uY29udGVudDtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBsaW5lUGFydHNbaV0uY29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBwcmV2UGFydFR5cGUgPSBJbmxpbmVUeXBlLnRleHQ7XHJcbiAgICAgICAgICAgICAgICBwcmV2VGV4dEVuZFdpdGhTcGFjZSA9IHRleHRFbmRXaXRoU3BhY2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIDMuMi4yIFx1NTkwNFx1NzQwNlx1ODg0Q1x1NTE4NVx1NEVFM1x1NzgwMVx1NTc1N1x1OTBFOFx1NTIwNlxyXG4gICAgICAgICAgICBjYXNlIElubGluZVR5cGUuY29kZTpcclxuICAgICAgICAgICAgICAgIC8vIENvZGUuMSBcdTY4MzlcdTYzNkVcdTUyNERcdTRFMDBcdTUzM0FcdTU3NTdcdTdDN0JcdTU3OEJcdTU0OENzZXR0aW5nc1x1NkRGQlx1NTJBMFx1N0E3QVx1NjgzQ1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoKHByZXZQYXJ0VHlwZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElubGluZVR5cGUubm9uZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLnRleHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNldHRpbmdzLklubGluZUNvZGVTcGFjZSAmJiAhcHJldlRleHRFbmRXaXRoU3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1tpLTFdLmNvbnRlbnQgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0TGluZSArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElubGluZVR5cGUuY29kZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2V0dGluZ3MuSW5saW5lQ29kZVNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5mb3JtdWxhOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5JbmxpbmVGb3JtdWxhU3BhY2UgfHwgc2V0dGluZ3MuSW5saW5lQ29kZVNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5saW5rOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5MaW5rU3BhY2UgfHwgc2V0dGluZ3MuSW5saW5lQ29kZVNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS51c2VyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5Vc2VyUGFydFNwYWNlIHx8IHNldHRpbmdzLklubGluZUNvZGVTcGFjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lQ2hhbmdlTGlzdC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDonICcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbGluZVBhcnRzW2ldLmJlZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW46JydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0TGluZSArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDb2RlLjIgXHU1OTgyXHU2NzlDXHU1MTQ5XHU2ODA3XHU1NzI4XHU4QkU1XHU1MzNBXHU1NzU3XHVGRjBDXHU1MjE5XHU4QkExXHU3Qjk3XHU2NzAwXHU3RUM4XHU1MTQ5XHU2ODA3XHU3Njg0XHU0RjREXHU3RjZFXHJcbiAgICAgICAgICAgICAgICBpZihpID09PSBjdXJzb3JMaW5lUGFydEluZGV4KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdEN1cnNvckNoID0gb2Zmc2V0ICsgY3Vyc29yUmVsYXRpdmVJbmRleDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIENvZGUuMyBcdTUzRDhcdTkxQ0ZcdTY2RjRcdTY1QjBcclxuICAgICAgICAgICAgICAgIHJlc3VsdExpbmUgKz0gbGluZVBhcnRzW2ldLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gbGluZVBhcnRzW2ldLmNvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgcHJldlBhcnRUeXBlID0gSW5saW5lVHlwZS5jb2RlO1xyXG4gICAgICAgICAgICAgICAgcHJldlRleHRFbmRXaXRoU3BhY2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgLy8gMy4yLjMgXHU1OTA0XHU3NDA2XHU4ODRDXHU1MTg1XHU1MTZDXHU1RjBGXHU3Njg0XHU5MEU4XHU1MjA2XHJcbiAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5mb3JtdWxhOlxyXG4gICAgICAgICAgICAgICAgLy8gRm9ybXVsYS4xIFx1NjgzOVx1NjM2RVx1NTI0RFx1NEUwMFx1NTMzQVx1NTc1N1x1N0M3Qlx1NTc4Qlx1NTQ4Q3NldHRpbmdzXHU2REZCXHU1MkEwXHU3QTdBXHU2ODNDXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2gocHJldlBhcnRUeXBlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5ub25lOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElubGluZVR5cGUudGV4dDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2V0dGluZ3MuSW5saW5lRm9ybXVsYVNwYWNlICYmICFwcmV2VGV4dEVuZFdpdGhTcGFjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVBhcnRzW2ktMV0uY29udGVudCArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5jb2RlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5JbmxpbmVDb2RlU3BhY2UgfHwgc2V0dGluZ3MuSW5saW5lRm9ybXVsYVNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5mb3JtdWxhOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5JbmxpbmVGb3JtdWxhU3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZUNoYW5nZUxpc3QucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6JyAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogbGluZVBhcnRzW2ldLmJlZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOicnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdExpbmUgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLmxpbms6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNldHRpbmdzLkxpbmtTcGFjZSB8fCBzZXR0aW5ncy5JbmxpbmVGb3JtdWxhU3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZUNoYW5nZUxpc3QucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6JyAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogbGluZVBhcnRzW2ldLmJlZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOicnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdExpbmUgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLnVzZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNldHRpbmdzLlVzZXJQYXJ0U3BhY2UgfHwgc2V0dGluZ3MuSW5saW5lRm9ybXVsYVNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gRm9ybXVsYS4yIFx1NTk4Mlx1Njc5Q1x1NTE0OVx1NjgwN1x1NTcyOFx1OEJFNVx1NTMzQVx1NTc1N1x1RkYwQ1x1NTIxOVx1OEJBMVx1N0I5N1x1NjcwMFx1N0VDOFx1NTE0OVx1NjgwN1x1NzY4NFx1NEY0RFx1N0Y2RVxyXG4gICAgICAgICAgICAgICAgaWYoaSA9PT0gY3Vyc29yTGluZVBhcnRJbmRleClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRDdXJzb3JDaCA9IG9mZnNldCArIGN1cnNvclJlbGF0aXZlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBGb3JtdWxhLjMgXHU1M0Q4XHU5MUNGXHU2NkY0XHU2NUIwXHJcbiAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9IGxpbmVQYXJ0c1tpXS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGxpbmVQYXJ0c1tpXS5jb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHByZXZQYXJ0VHlwZSA9IElubGluZVR5cGUuZm9ybXVsYTtcclxuICAgICAgICAgICAgICAgIHByZXZUZXh0RW5kV2l0aFNwYWNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIC8vIDMuMi40IFx1NTkwNFx1NzQwNlx1ODg0Q1x1NTE4NVx1OTRGRVx1NjNBNVx1NzY4NFx1OTBFOFx1NTIwNlxyXG4gICAgICAgICAgICBjYXNlIElubGluZVR5cGUubGluazpcclxuICAgICAgICAgICAgICAgIC8vIExpbmsuMSBcdTY4MzlcdTYzNkVcdTUyNERcdTRFMDBcdTUzM0FcdTU3NTdcdTdDN0JcdTU3OEJcdTU0OENzZXR0aW5nc1x1NkRGQlx1NTJBMFx1N0E3QVx1NjgzQ1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoKHByZXZQYXJ0VHlwZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElubGluZVR5cGUubm9uZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLnRleHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGFyQXRUZXh0RW5kID0gbGluZVBhcnRzW2ktMV0uY29udGVudC5jaGFyQXQobGluZVBhcnRzW2ktMV0uY29udGVudC5sZW5ndGgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNoYXJBdFRleHRFbmQ9PT0nICcpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2V0dGluZ3MuTGlua1NtYXJ0U3BhY2UgJiYgIXByZXZUZXh0RW5kV2l0aFNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnVGVzdFdpa2lMaW5rID0gL1xcIT9cXFtcXFtbXlxcW1xcXV0qP1xcXVxcXS87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnTWRMaW5rID0gL1xcIT9cXFtbXlxcW1xcXV0qP1xcXVxcKFteXFxzXFwpXFwoXFxbXFxdXFx7XFx9J10qXFwpL2c7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnTm9OZWVkU3BhY2UgPSAvW1xcdTRlMDAtXFx1OWZhNV1bXFx1NGUwMC1cXHU5ZmE1XS9nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzQmFyZUxpbmsgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0d29OZWlnaGJvckNoYXJzID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hhckF0TGlua0JlZ2luID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlua1dpdGhOb1RleHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlZ1Rlc3RXaWtpTGluay50ZXN0KGxpbmVQYXJ0c1tpXS5jb250ZW50KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmVnaW5JbmRleCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobGluZVBhcnRzW2ldLmNvbnRlbnQuY2hhckF0KDApPT09JyEnKSBiZWdpbkluZGV4PTM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhckF0TGlua0JlZ2luID0gbGluZVBhcnRzW2ldLmNvbnRlbnQuY2hhckF0KGJlZ2luSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNoYXJBdExpbmtCZWdpbj09PSddJykgbGlua1dpdGhOb1RleHQgPSB0cnVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHJlZ01kTGluay50ZXN0KGxpbmVQYXJ0c1tpXS5jb250ZW50KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnTWRMaW5rQmVnaW4gPSAvXFxbLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hhckF0TGlua0JlZ2luSW5kZXggPSBsaW5lUGFydHNbaV0uY29udGVudC5zZWFyY2gocmVnTWRMaW5rQmVnaW4pKzE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhckF0TGlua0JlZ2luID0gbGluZVBhcnRzW2ldLmNvbnRlbnQuY2hhckF0KGNoYXJBdExpbmtCZWdpbkluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjaGFyQXRMaW5rQmVnaW49PT0nXScpIGxpbmtXaXRoTm9UZXh0ID0gdHJ1ZTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNCYXJlTGluayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdvTmVpZ2hib3JDaGFycyA9IGNoYXJBdFRleHRFbmQrY2hhckF0TGlua0JlZ2luOyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhbGlua1dpdGhOb1RleHQgJiYgKGlzQmFyZUxpbmsgfHwgIXJlZ05vTmVlZFNwYWNlLnRlc3QodHdvTmVpZ2hib3JDaGFycykpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVQYXJ0c1tpLTFdLmNvbnRlbnQgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdExpbmUgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoc2V0dGluZ3MuTGlua1NwYWNlICYmICFwcmV2VGV4dEVuZFdpdGhTcGFjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVBhcnRzW2ktMV0uY29udGVudCArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5jb2RlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5JbmxpbmVDb2RlU3BhY2UgfHwgc2V0dGluZ3MuTGlua1NwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5mb3JtdWxhOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5JbmxpbmVGb3JtdWxhU3BhY2UgfHwgc2V0dGluZ3MuTGlua1NwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5saW5rOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5MaW5rU3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZUNoYW5nZUxpc3QucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6JyAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogbGluZVBhcnRzW2ldLmJlZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOicnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdExpbmUgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLnVzZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNldHRpbmdzLlVzZXJQYXJ0U3BhY2UgfHwgc2V0dGluZ3MuTGlua1NwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIExpbmsuMiBcdTU5ODJcdTY3OUNcdThCRTVcdTUzM0FcdTU3NTdcdTY3MDlcdTUxNDlcdTY4MDdcdUZGMENcdTUyMTlcdThCQTFcdTdCOTdcdTY3MDBcdTdFQzhcdTUxNDlcdTY4MDdcdTRGNERcdTdGNkVcclxuICAgICAgICAgICAgICAgIGlmKGkgPT09IGN1cnNvckxpbmVQYXJ0SW5kZXgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q3Vyc29yQ2ggPSBvZmZzZXQgKyBjdXJzb3JSZWxhdGl2ZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gTGluay4zIFx1NjZGNFx1NjVCMFx1NTNEOFx1OTFDRlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0TGluZSArPSBsaW5lUGFydHNbaV0uY29udGVudDtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSBsaW5lUGFydHNbaV0uY29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBwcmV2UGFydFR5cGUgPSBJbmxpbmVUeXBlLmxpbms7XHJcbiAgICAgICAgICAgICAgICBwcmV2VGV4dEVuZFdpdGhTcGFjZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyAzLjIuNSBcdTU5MDRcdTc0MDZcdTc1MjhcdTYyMzdcdTgxRUFcdTVCOUFcdTRFNDlcdTUzM0FcdTU3NTdcdTc2ODRcdTkwRThcdTUyMDZcclxuICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLnVzZXI6XHJcbiAgICAgICAgICAgICAgICAvLyBVc2VyLjEgXHU2ODM5XHU2MzZFXHU1MjREXHU0RTAwXHU1MzNBXHU1NzU3XHU3QzdCXHU1NzhCXHU1NDhDc2V0dGluZ3NcdTZERkJcdTUyQTBcdTdBN0FcdTY4M0NcclxuICAgICAgICAgICAgICAgIHN3aXRjaChwcmV2UGFydFR5cGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLm5vbmU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS50ZXh0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5Vc2VyUGFydFNwYWNlICYmICFwcmV2VGV4dEVuZFdpdGhTcGFjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVBhcnRzW2ktMV0uY29udGVudCArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS5jb2RlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5JbmxpbmVDb2RlU3BhY2UgfHwgc2V0dGluZ3MuVXNlclBhcnRTcGFjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lQ2hhbmdlTGlzdC5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDonICcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbGluZVBhcnRzW2ldLmJlZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW46JydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0TGluZSArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElubGluZVR5cGUuZm9ybXVsYTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2V0dGluZ3MuSW5saW5lRm9ybXVsYVNwYWNlIHx8IHNldHRpbmdzLlVzZXJQYXJ0U3BhY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZUNoYW5nZUxpc3QucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6JyAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogbGluZVBhcnRzW2ldLmJlZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOicnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdExpbmUgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbmxpbmVUeXBlLmxpbms6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNldHRpbmdzLkxpbmtTcGFjZSB8fCBzZXR0aW5ncy5Vc2VyUGFydFNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5saW5lVHlwZS51c2VyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5ncy5Vc2VyUGFydFNwYWNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVDaGFuZ2VMaXN0LnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OicgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW46IGxpbmVQYXJ0c1tpXS5iZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBsaW5lUGFydHNbaV0uYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjonJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gVXNlci4yIFx1NTk4Mlx1Njc5Q1x1OEJFNVx1NTMzQVx1NTc1N1x1NjcwOVx1NTE0OVx1NjgwN1x1RkYwQ1x1NTIxOVx1OEJBMVx1N0I5N1x1NjcwMFx1N0VDOFx1NTE0OVx1NjgwN1x1NEY0RFx1N0Y2RVxyXG4gICAgICAgICAgICAgICAgaWYoaSA9PT0gY3Vyc29yTGluZVBhcnRJbmRleClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRDdXJzb3JDaCA9IG9mZnNldCArIGN1cnNvclJlbGF0aXZlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBMaW5rLjMgXHU2NkY0XHU2NUIwXHU1M0Q4XHU5MUNGXHJcbiAgICAgICAgICAgICAgICByZXN1bHRMaW5lICs9IGxpbmVQYXJ0c1tpXS5jb250ZW50O1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGxpbmVQYXJ0c1tpXS5jb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHByZXZQYXJ0VHlwZSA9IElubGluZVR5cGUudXNlcjtcclxuICAgICAgICAgICAgICAgIHByZXZUZXh0RW5kV2l0aFNwYWNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yKGxldCBpPTA7aTxsaW5lUGFydHMubGVuZ3RoO2krKylcclxuICAgIHtcclxuICAgICAgICBpZihsaW5lUGFydHNbaV0udHlwZSA9PT0gSW5saW5lVHlwZS50ZXh0ICYmIGxpbmVQYXJ0c1tpXS5jb250ZW50IT1saW5lUGFydHNPcmlnaW5baV0uY29udGVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlubGluZUNoYW5nZUxpc3QucHVzaChcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsaW5lUGFydHNbaV0uY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICBiZWdpbjogbGluZVBhcnRzT3JpZ2luW2ldLmJlZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogbGluZVBhcnRzT3JpZ2luW2ldLmVuZCxcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW46IGxpbmVQYXJ0c09yaWdpbltpXS5jb250ZW50XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5saW5lQ2hhbmdlTGlzdCA9IGlubGluZUNoYW5nZUxpc3Quc29ydCgoYSwgYik6bnVtYmVyPT5hLmJlZ2luLWIuYmVnaW4pO1xyXG4gICAgcmV0dXJuIFtyZXN1bHRMaW5lLCByZXN1bHRDdXJzb3JDaCwgaW5saW5lQ2hhbmdlTGlzdF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1Bvc2l0aW9uQmVmb3JlKHBvczE6IEVkaXRvclBvc2l0aW9uLCBwb3MyOiBFZGl0b3JQb3NpdGlvbik6IGJvb2xlYW5cclxue1xyXG4gICAgaWYocG9zMS5saW5lIDwgcG9zMi5saW5lKSByZXR1cm4gdHJ1ZTtcclxuICAgIGVsc2UgaWYgKHBvczEubGluZSA+IHBvczIubGluZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIGlmKHBvczEuY2ggPCBwb3MyLmNoKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQXlJOzs7QUNBekksc0JBQXVDO0FBRWhDLElBQUs7QUFBTCxVQUFLLGFBQUw7QUFBaUIsd0JBQUs7QUFBUSx3QkFBSztBQUFRLDJCQUFRO0FBQVcsd0JBQUs7QUFBUSx3QkFBSztBQUFnQix3QkFBSztBQUFBLEdBQWhH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
